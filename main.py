import os
import json
import random
import asyncio
from pathlib import Path
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from dotenv import load_dotenv
from datetime import datetime
from aiogram.utils.markdown import quote_html
from aiogram.utils.exceptions import CantInitiateConversation
from photo_tools import ultra_obscured_version
from fbi import get_open_cases


# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
CULT_CHANNEL_ID = int(os.getenv("CULT_CHANNEL_ID"))
CONTROL_CHAT_ID = int(os.getenv("CONTROL_CHAT_ID"))
FBI_CHANNEL_ID = int(os.getenv("FBI_CHANNEL_ID"))

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# üëâ –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –§–ë–†
from fbi import register_fbi_handlers
register_fbi_handlers(dp)

ritual_loop_task = None



# –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
DATA_DIR = Path("data")
EVENT_FILE = Path("current_event.json")
REPORT_FILE = Path("ritual_reports.json")
SCORES_FILE = Path("scores.json")
PENDING_FILE = Path("pending_reports.json")
PLAYERS_FILE = Path("players.json")
WEAPONS_FILE = DATA_DIR / "weapons.json"
IDENTITIES_FILE = Path("data") / "cultist_identities.json"
MAX_REPORTS = 3

# –§–ª–∞–≥ —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ-—Ä–∏—Ç—É–∞–ª–∞
auto_ritual_active = False

# –ó–∞–≥—Ä—É–∑–∫–∞ JSON

def load_json(filename):
    with open(DATA_DIR / filename, encoding="utf-8") as f:
        return json.load(f)

#def load_reports():
 #   if REPORT_FILE.exists():
  #      with open(REPORT_FILE, encoding="utf-8") as f:
   #         return json.load(f)
    #return {"victim_id": None, "reports": []}

#def save_reports(data):
 #   with open(REPORT_FILE, "w", encoding="utf-8") as f:
  #      json.dump(data, f, ensure_ascii=False, indent=2)

def normalize_weapon_id(text):
    mapping = {
        "–ê": "A", "–í": "B", "–°": "C", "–ï": "E", "–ù": "H", "–ö": "K",
        "–ú": "M", "–û": "O", "–†": "P", "–¢": "T", "–•": "X", "–£": "Y"
    }
    text = text.strip().upper()
    return "".join(mapping.get(ch, ch) for ch in text)

def safe_get_weapon_id(text):
    if not text or "weapon:" not in text:
        return None  # –í–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

    weapon_id = text.split("weapon:", 1)[-1].strip()
    if len(weapon_id) < 2:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
        return None

    return weapon_id
    

def load_all_reports():
    if REPORT_FILE.exists():
        with open(REPORT_FILE, encoding="utf-8") as f:
            return json.load(f)
    return {}
    
def load_pending_reports():
    if not os.path.exists("pending_reports.json"):
        return []

    with open("pending_reports.json", encoding="utf-8") as f:
        try:
            data = json.load(f)
            return data if isinstance(data, list) else []
        except Exception as e:
            print(f"[DEBUG] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è pending_reports.json: {e}")
            return []

def save_all_reports(data):
    with open(REPORT_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def add_report_entry(victim_id: str, victim_data: dict, report: dict):
    all_reports = load_all_reports()
    victim_key = str(victim_id)

    if victim_key not in all_reports:
        all_reports[victim_key] = {
            "victim_name": victim_data.get("victim_name"),
            "ritual": victim_data.get("ritual"),
            "place": victim_data.get("place"),
            "reports": []
        }

    all_reports[victim_key]["reports"].append(report)
    save_all_reports(all_reports)

def load_scores():
    try:
        with open(SCORES_FILE, encoding="utf-8") as f:
            scores = json.load(f)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –æ—á–∫–∏: {scores}")
            return scores
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ scores.json: {e}")
        return {}

def save_scores(data):
    with open(SCORES_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def save_pending(data):
    with open(PENDING_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
        
def load_players():
    if PLAYERS_FILE.exists():
        with open(PLAYERS_FILE, encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_players(players):
    with open(PLAYERS_FILE, "w", encoding="utf-8") as f:
        json.dump(players, f, ensure_ascii=False, indent=2)

def already_in_team(user_id, team=None):
    players = load_players()
    current = players.get(str(user_id))
    return current if (team is None or current == team) else None

def assign_team(user_id, team):
    players = load_players()
    players[str(user_id)] = team
    save_players(players)

# ==== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ====

async def run_ritual():
    victims = load_json("victims.json")
    rituals = load_json("rituals.json")
    weapons = load_json("weapons.json")
    places = load_json("places.json")

    auto_ritual_active = True
    
    try:
        with open("used_victims.json", encoding="utf-8") as f:
            content = f.read().strip()
            used_ids = json.loads(content) if content else []
    except FileNotFoundError:
        used_ids = []

    available_ids = [vid for vid in victims if str(vid) not in used_ids]
    if not available_ids:
        await bot.send_message(CULT_CHANNEL_ID, "–í—Å–µ –∂–µ—Ä—Ç–≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã.")
        return

    victim_id = random.choice(available_ids)
    victim = victims[victim_id]

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–µ–Ω–Ω–æ –∫–ª—é—á (victim_id), –∞ –Ω–µ victim["id"]
    used_ids.append(victim_id)
    with open("used_victims.json", "w", encoding="utf-8") as f:
        json.dump(used_ids, f, ensure_ascii=False, indent=2)

    ritual = random.choice(rituals)
    weapon_entry = random.choice(weapons)
    weapon = weapon_entry["name"]
    place = random.choice(places)

    event = {
        "victim_id": victim_id,
        "victim_name": victim["name"],
        "victim_description": victim["description"],
        "victim_photo": victim["photo"],
        "ritual": ritual,
        "weapon": weapon,
        "place": place,
        "assigned_weapons": []
    }

    with open(EVENT_FILE, "w", encoding="utf-8") as f:
        json.dump(event, f, ensure_ascii=False, indent=2)

    text = (
        f"\U0001F52E <b>–ù–û–í–´–ô –†–ò–¢–£–ê–õ</b>\n"
        f"–ñ–µ—Ä—Ç–≤–∞: {event['victim_name']} ({event['victim_description']})\n"
        f"–û—Ä—É–¥–∏–µ: {event['weapon']}\n"
        f"–†–∏—Ç—É–∞–ª: {event['ritual']}\n"
        f"–ú–µ—Å—Ç–æ: {event['place']}"
    )

    with open(event['victim_photo'], "rb") as photo:
        await bot.send_photo(
            chat_id=CULT_CHANNEL_ID,
            photo=photo,
            caption=text,
            parse_mode="HTML"
        )

# ==== –†–£–ß–ù–´–ï –ö–û–ú–ê–ù–î–´ ====

@dp.message_handler(commands=["—Ä–∏—Ç—É–∞–ª"])
async def start_ritual_loop(message: types.Message):
    global ritual_loop_task

    if message.from_user.id != ADMIN_ID:
        return  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç

    if ritual_loop_task and not ritual_loop_task.done():
        await message.reply("üîÑ –¶–∏–∫–ª —Ä–∏—Ç—É–∞–ª–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
        return

    async def auto_ritual_loop():
        while True:
            await run_ritual()
            await asyncio.sleep(150)  # 2,5 –º–∏–Ω—É—Ç

    ritual_loop_task = asyncio.create_task(auto_ritual_loop())
    await message.reply("üîÆ –¶–∏–∫–ª —Ä–∏—Ç—É–∞–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω. –ö–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç –±—É–¥–µ—Ç –Ω–æ–≤–∞—è –∂–µ—Ä—Ç–≤–∞.")

@dp.message_handler(commands=["—Å—Ç–æ–ø"])
async def stop_ritual_loop(message: types.Message):
    global ritual_loop_task

    if message.from_user.id != ADMIN_ID:
        return  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç

    if not ritual_loop_task or ritual_loop_task.done():
        await message.reply("‚õî –¶–∏–∫–ª —Ä–∏—Ç—É–∞–ª–æ–≤ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return

    ritual_loop_task.cancel()
    ritual_loop_task = None
    await message.reply("üõë –¶–∏–∫–ª —Ä–∏—Ç—É–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


@dp.message_handler(commands=["–æ—á–∫–∏"])
async def show_scores(message: types.Message):
    scores = load_scores()
    if not scores:
        await message.reply("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–ª–∏–ª –∫—Ä–æ–≤—å.")
        return

    sorted_scores = sorted(scores.items(), key=lambda x: x[1], reverse=True)
    top_10 = sorted_scores[:10]

    text = "üèÜ <b>–¢–æ–ø-10 –∫—É–ª—å—Ç–∏—Å—Ç–æ–≤</b>:\n"

    for i, (user_id, score) in enumerate(top_10, 1):
        mention = f"<a href='tg://user?id={user_id}'>–ö—É–ª—å—Ç–∏—Å—Ç</a>"
        text += f"{i}. {mention}: {score} –æ—á–∫–æ–≤\n"

    await message.reply(text, parse_mode="HTML")

@dp.message_handler(commands=["–¥–µ–ª–∞"])
async def show_open_cases(message: types.Message):
    user_id = message.from_user.id
    players = load_players()

    if players.get(str(user_id), {}).get("team") != "fbi":
        await message.reply("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç–∞–º –§–ë–†.")
        return

    open_cases = get_open_cases()
    if not open_cases:
        await message.reply("‚úÖ –í—Å–µ –¥–µ–ª–∞ –∑–∞–∫—Ä—ã—Ç—ã. –ñ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è.")
        return

    text = "<b>üïµÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–ª–∞:</b>\n\n"

    for case in open_cases:
        text += (
            f"üìÅ <b>{case['case_code']}</b>\n"
            f"üìç {case['place']}\n\n"
        )

    await message.reply(text, parse_mode="HTML")

# ==== –§–û–ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê ====

async def auto_ritual_loop():
    global auto_ritual_active
    while True:
        if auto_ritual_active:
            try:
                await run_ritual()
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ-—Ä–∏—Ç—É–∞–ª–µ: {e}")
        await asyncio.sleep(15)

# ==== –ü–†–ò–Å–ú –û–¢–ß–Å–¢–û–í ====

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_report(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or f"id:{user_id}"
    print(f"[DEBUG] –ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç {username} –≤ —á–∞—Ç–µ {message.chat.id}")

    if str(message.chat.id) != str(CULT_CHANNEL_ID):
        print(f"[DEBUG] ‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ CULT_CHANNEL_ID ({CULT_CHANNEL_ID})")
        return

    if not EVENT_FILE.exists():
        await message.reply("‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∏—Ç—É–∞–ª–∞.")
        print(f"[DEBUG] ‚ùå –§–∞–π–ª {EVENT_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        with open(EVENT_FILE, encoding="utf-8") as f:
            event = json.load(f)
    except Exception as e:
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.")
        print(f"[DEBUG] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è EVENT_FILE: {e}")
        return



    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∏—Å—ã–ª–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å weapon_id
    assigned_weapons = event.get("assigned_weapons", [])
    user_weapon = next((w for w in assigned_weapons if w["user_id"] == user_id), None)

    if not user_weapon:
        await message.reply("‚õî –¢—ã –Ω–µ —É–∫–∞–∑–∞–ª ID –æ—Ä—É–∂–∏—è.\n–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞: <code>weapon:QW34</code>", parse_mode="HTML")
        print(f"[DEBUG] ‚õî –û—Ç—á—ë—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω ‚Äî –Ω–µ —É–∫–∞–∑–∞–Ω weapon_id –æ—Ç {username}")
        return

    pending = load_pending_reports()

    if any(r.get("user_id") == user_id and r.get("victim_id") == event["victim_id"] for r in pending):
        await message.reply(f"‚õî @{username}, —Ç—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –æ—Ç—á—ë—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞.")
        print(f"[DEBUG] ‚õî –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –æ—Ç—á—ë—Ç –æ—Ç {username}")
        return

    try:
        with open(Path("data") / "weapons.json", encoding="utf-8") as f:
            weapons = json.load(f)
        matched = next((w for w in weapons if user_weapon["weapon_id"] in w.get("ids", [])), None)
        weapon_name = matched.get("name") if matched else None

        if not matched:
            print(f"[DEBUG] ‚ùå –û—Ä—É–∂–∏–µ —Å ID {user_weapon['weapon_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ weapons.")
        else:
            print(f"[DEBUG] ‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ—Ä—É–∂–∏–µ: {weapon_name}")
    except Exception as e:
        print(f"[DEBUG] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å weapon_name: {e}")

    all_reports = load_all_reports()
    victim_key = str(event["victim_id"])
    if victim_key in all_reports:
        if any(r.get("user_id") == user_id for r in all_reports[victim_key]["reports"]):
            await message.reply("‚õî –¢—ã —É–∂–µ –ø—Ä–∏—Å—ã–ª–∞–ª –æ—Ç—á—ë—Ç –ø–æ —ç—Ç–æ–º—É —Ä–∏—Ç—É–∞–ª—É.")
            print(f"[DEBUG] ‚õî {username} —É–∂–µ —Å–¥–∞–≤–∞–ª –æ—Ç—á—ë—Ç –ø–æ –∂–µ—Ä—Ç–≤–µ {victim_key}")
            return

    photo = message.photo[-1]
    filename = f"ritual_{event['victim_id']}_{user_id}.jpg"
    os.makedirs("reports", exist_ok=True)
    destination = Path("reports") / filename
    await photo.download(destination_file=destination)
    print(f"[DEBUG] –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {destination}")

    await message.reply("üì∏ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    

    caption = (
        f"üßæ –û—Ç—á—ë—Ç –æ—Ç @{username}\n"
        f"–ñ–µ—Ä—Ç–≤–∞: {event.get('victim_name')}\n"
        f"–†–∏—Ç—É–∞–ª: {event['ritual']}\n"
        f"–û—Ä—É–¥–∏–µ: {user_weapon['weapon_id']}\n"
        f"–ú–µ—Å—Ç–æ: {event['place']}"
    )

    try:
        with open(destination, "rb") as f:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å message_id
            sent_message = await bot.send_photo(CONTROL_CHAT_ID, photo=f, caption=caption)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–∂–µ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º message_id
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{sent_message.message_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{sent_message.message_id}")
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await bot.edit_message_reply_markup(
            chat_id=CONTROL_CHAT_ID,
            message_id=sent_message.message_id,
            reply_markup=kb
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç –≤ pending
        pending.append({
            "user_id": user_id,
            "username": username,
            "weapon_id": user_weapon["weapon_id"],
            "weapon": weapon_name,  # –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä—É–∂–∏—è
            "victim_id": event["victim_id"],
            "victim_name": event.get("victim_name"),
            "ritual": event.get("ritual"),
            "place": event.get("place"),
            "photo_file": photo.file_id,
            "message_id": sent_message.message_id
        })

        with open("pending_reports.json", "w", encoding="utf-8") as f:
            json.dump(pending, f, ensure_ascii=False, indent=2)

    except Exception as e:
        print(f"[ERROR] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É: {e}")
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
        return


# ==== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ====


@dp.callback_query_handler(lambda c: c.data.startswith("accept") or c.data.startswith("reject"))
async def process_callback(call: CallbackQuery):
    action, msg_id = call.data.split(":")
    pending = load_pending_reports()
    msg_id = call.data.split(":")[1]
    entry = next((r for r in pending if str(r.get("message_id", "")) == msg_id), None)

    if entry:
        pending.remove(entry)
    else:
        print(f"[DEBUG] ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –æ—Ç—á—ë—Ç —Å msg_id={msg_id} –≤ pending.")
    save_pending(pending)

    if not entry:
        await call.answer("‚õî –û—Ç—á—ë—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
        return

    user_id = entry["user_id"]
    username = entry["username"]

    if action == "accept":
        # 1. –û—á–∫–∏
        scores = load_scores()
        scores[str(user_id)] = scores.get(str(user_id), 0) + 1
        save_scores(scores)

        # 2. –î–∞–Ω–Ω—ã–µ –∏–∑ pending
        ritual = entry.get("ritual")
        place = entry.get("place")
        weapon_name = entry.get("weapon")   # –ù–∞–∑–≤–∞–Ω–∏–µ, –Ω–µ ID
        weapon_id = entry.get("weapon_id")
        victim_id = entry.get("victim_id")
        

        players = load_players()
        player = players.get(str(user_id), {})
        identity_id = player.get("identity_id")

        
        photo_file_id = call.message.photo[-1].file_id if call.message.photo else None
        timestamp = datetime.utcnow().isoformat()

        report_entry = {
            "user_id": user_id,
            "identity_id": identity_id,
            "weapon_id": weapon_id,
            "weapon_name": weapon_name,
            "photo_file_id": photo_file_id,
            "timestamp": timestamp
        }

        add_report_entry(victim_id, {
            "victim_name": entry.get("victim_name"),
            "ritual": ritual,
            "place": place
        }, report_entry)

        # 3. –û—Ç–≤–µ—Ç—ã
        old_caption = call.message.caption or ""
        new_caption = old_caption + f"\n‚úÖ –û—á–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã ({scores[str(user_id)]})"
        await call.message.edit_caption(new_caption)
        await bot.send_message(CULT_CHANNEL_ID, f"‚úÖ @{username}, –æ—Ç—á—ë—Ç –ø—Ä–∏–Ω—è—Ç. –£ –Ω–µ–≥–æ {scores[str(user_id)]} –æ—á–∫–æ–≤.")

    elif action == "reject":
        try:
            new_caption = (call.message.caption or "") + "\n‚ùå –û—Ç—á—ë—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω"
            await call.message.edit_caption(new_caption)
        except Exception as e:
            print(f"[DEBUG] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å caption: {e}")

        # –£–≤–µ–¥–æ–º–∏–º –∏–≥—Ä–æ–∫–∞
        try:
            await bot.send_message(user_id, "‚ùå –†–∏—Ç—É–∞–ª –Ω–µ –ø—Ä–∏–Ω—è—Ç. –î–µ—Ä–µ–≤–æ –æ—Ç–≤–µ—Ä–≥–ª–æ —Ç–≤–æ—ë –ø–æ–¥–Ω–æ—à–µ–Ω–∏–µ.")
        except Exception as e:
            print(f"[DEBUG] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        await call.answer("‚ùå –û—Ç—á—ë—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

        


#–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –§–ë–†
@dp.callback_query_handler(lambda c: c.data in ["join_cult", "join_fbi"])
async def handle_team_selection(call: types.CallbackQuery):
    user_id = call.from_user.id
    username = call.from_user.username or f"id:{user_id}"
    players = load_players()
    scores = load_scores()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    current_player = players.get(str(user_id))

    if call.data == "join_cult":
        # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –≤ –§–ë–† ‚Äî –æ—Ç–∫–ª–æ–Ω–∏—Ç—å
        if current_player and isinstance(current_player, dict) and current_player.get("team") == "fbi":
            await call.message.edit_text("‚ùå –¢—ã —É–∂–µ –≤ –§–ë–†. –ö—É–ª—å—Ç –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç —Ç–µ–±—è.")
            return

        # –ï—Å–ª–∏ —É–∂–µ –≤ –∫—É–ª—å—Ç–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
        if current_player and isinstance(current_player, dict) and current_player.get("team") == "cult":
            try:
                member = await bot.get_chat_member(CULT_CHANNEL_ID, user_id)
                if member.status not in ("left", "kicked"):
                    await call.message.edit_text("‚õî –¢—ã —É–∂–µ –≤ –∫—É–ª—å—Ç–µ.")
                    return
                else:
                    # –í—ã—à–µ–ª ‚Äî —Ä–∞–∑—Ä–µ—à–∏–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
                    pass
            except Exception as e:
                await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
                await call.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return

        # –ù–∞–∑–Ω–∞—á–∞–µ–º –ª–∏—á–Ω–æ—Å—Ç—å –∫—É–ª—å—Ç–∏—Å—Ç—É
        try:
            with open(IDENTITIES_FILE, encoding="utf-8") as f:
                identities = json.load(f)
        except Exception as e:
            await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cultist_identities.json: {e}")
            await call.message.edit_text("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –û–±—Ä—è–¥ –ø—Ä–µ—Ä–≤–∞–ª–∏.")
            return

        identity = random.choice(identities)

        players[str(user_id)] = {
            "team": "cult",
            "identity_id": identity["id"]
        }
        save_players(players)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–≤–∞–π—Ç
        try:
            invite = await bot.create_chat_invite_link(chat_id=CULT_CHANNEL_ID, member_limit=1, creates_join_request=False)
            invite_link = invite.invite_link
        except Exception as e:
            await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç–∞: {e}")
            invite_link = "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏"

        text = (
            f"üîÆ <b>–¢—ã —Ç–µ–ø–µ—Ä—å —á–∞—Å—Ç—å –Ω–∞—Å</b>\n"
            f"<b>–¢–≤–æ—è –ª–∏—á–Ω–æ—Å—Ç—å:</b> {identity['name']} {identity['mask_symbol']}\n"
            f"<i>{identity['description']}</i>\n\n"
            f"–ó–∞–ø–æ–º–Ω–∏: —Ç—ã ‚Äî –º–∞—Å–∫–∞, –∞ –Ω–µ —á–µ–ª–æ–≤–µ–∫. –ù–æ—Å–∏ –µ—ë. –ò –Ω–µ –≥–æ–≤–æ—Ä–∏ –≤—Å–ª—É—Ö —Å–≤–æ—ë –∏–º—è.\n\n"
            f"‚û°Ô∏è –í—Å—Ç—É–ø–∏ –≤ –∫—É–ª—å—Ç: {invite_link}"
        )
        await call.message.edit_text(text, parse_mode="HTML")

    else:  # join_fbi
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –§–ë–†

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —É–∂–µ –≤ –§–ë–†
        if current_player and isinstance(current_player, dict) and current_player.get("team") == "fbi":
            await call.message.edit_text("‚õî –¢—ã —É–∂–µ –≤ –§–ë–†.")
            return

        # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –±—ã–ª –≤ –∫—É–ª—å—Ç–µ - –ø—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ
        if current_player and isinstance(current_player, dict) and current_player.get("team") == "cult":
            print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –±—ã–ª –≤ –∫—É–ª—å—Ç–µ, –ø—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ")

            # –ú–∏–Ω—É—Å 10 –æ—á–∫–æ–≤ –∑–∞ –ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ
            current_score = scores.get(str(user_id), 0)
            new_score = current_score - 10
            scores[str(user_id)] = new_score
            save_scores(scores)

            print(f"[DEBUG] –°—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω: {current_score} -> {new_score}")

            # 50% —à–∞–Ω—Å, —á—Ç–æ –∫—É–ª—å—Ç —É–∑–Ω–∞–µ—Ç
            if random.random() < 0.5:
                try:
                    await bot.send_message(
                        CULT_CHANNEL_ID,
                        f"üòà @{username} –ø–∞–ª –Ω–∏—Ü –∏ –ø–æ–ø—ã—Ç–∞–ª—Å—è —Å–±–µ–∂–∞—Ç—å –≤ –§–ë–†. –ö—É–ª—å—Ç –ø–æ–º–Ω–∏—Ç –ø—Ä–µ–¥–∞—Ç–µ–ª–µ–π..."
                    )
                    print(f"[DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫—É–ª—å—Ç")
                except Exception as e:
                    print(f"[DEBUG] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫—É–ª—å—Ç: {e}")
                    await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª –∫—É–ª—å—Ç–∞: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥–∞—Ç–µ–ª—é
            try:
                await bot.send_message(
                    user_id,
                    f"‚ùå –¢—ã –±—ã–ª –≤ –∫—É–ª—å—Ç–µ, –Ω–æ –§–ë–† –ø—Ä–∏–Ω—è–ª–æ —Ç–µ–±—è.\n"
                    f"üîª –®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ: -10 –æ—á–∫–æ–≤\n"
                    f"üí∞ –¢–≤–æ–π —Å—á–µ—Ç —Ç–µ–ø–µ—Ä—å: {new_score}"
                )
                print(f"[DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ –æ —à—Ç—Ä–∞—Ñ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                print(f"[DEBUG] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª–∏—á–∫—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                penalty_text = f"‚ùå –®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ: -10 –æ—á–∫–æ–≤. –°—á–µ—Ç: {new_score}\n\n"
            else:
                penalty_text = ""
        else:
            penalty_text = ""

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∫–æ–º–∞–Ω–¥—É –§–ë–†
        players[str(user_id)] = {"team": "fbi"}
        save_players(players)

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–∞–π—Ç –≤ –§–ë–†
        try:
            invite = await bot.create_chat_invite_link(chat_id=FBI_CHANNEL_ID, member_limit=1, creates_join_request=False)
            invite_link = invite.invite_link
        except Exception as e:
            await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç–∞ –§–ë–†: {e}")
            invite_link = "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏"

        response_text = (
            f"{penalty_text}"
            f"üïµÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–ë–†. –£–ª–∏–∫–∏ –Ω–µ –∂–¥—É—Ç.\n"
            f"‚û°Ô∏è {invite_link}"
        )

        await call.message.edit_text(response_text)
        print(f"[DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –§–ë–† –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {username}")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –æ—á–∫–æ–≤
@dp.message_handler(commands=["debug_score"])
async def debug_score(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    user_id = message.from_user.id
    scores = load_scores()
    players = load_players()

    debug_info = f"""
üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
User ID: {user_id}
–¢–µ–∫—É—â–∏–µ –æ—á–∫–∏: {scores.get(str(user_id), 0)}
–ö–æ–º–∞–Ω–¥–∞: {players.get(str(user_id), "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞")}

–í—Å–µ –æ—á–∫–∏: {scores}
–í—Å–µ –∏–≥—Ä–æ–∫–∏: {players}
    """

    await message.reply(debug_info)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—á–∫–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
@dp.message_handler(commands=["set_score"])
async def set_score(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    try:
        parts = message.text.split()
        if len(parts) < 3:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_score <user_id> <–æ—á–∫–∏>")
            return

        target_user_id = parts[1]
        new_score = int(parts[2])

        scores = load_scores()
        scores[target_user_id] = new_score
        save_scores(scores)

        await message.reply(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ—á–∫–∏ {new_score} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def safe_send_private_message(user_id, text):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        await bot.send_message(user_id, text)
        return True
    except Exception as e:
        print(f"[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False


#–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@dp.chat_member_handler()
async def on_chat_member_update(update: types.ChatMemberUpdated):
    print("üì• –°–æ–±—ã—Ç–∏–µ chat_member –ø—Ä–∏—à–ª–æ!")
    if update.chat.id != CULT_CHANNEL_ID:
        return

    new_status = update.new_chat_member.status
    if new_status != "member":
        return  # –¢–æ–ª—å–∫–æ –≤—Å—Ç—É–ø–∏–≤—à–∏–µ

    user_id = update.new_chat_member.user.id
    players = load_players()
    player = players.get(str(user_id))

    if not player or player.get("team") != "cult":
        return

    identity_id = player.get("identity_id")
    if not identity_id:
        return

    try:
        with open(IDENTITIES_FILE, encoding="utf-8") as f:
            identities = json.load(f)
    except Exception as e:
        await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å cultist_identities.json: {e}")
        return

    identity = next((i for i in identities if i["id"] == identity_id), None)
    if not identity:
        return

    mention = update.new_chat_member.user.get_mention(as_html=True)
    await bot.send_message(
        CULT_CHANNEL_ID,
        f"üåí –ù–æ–≤–æ–µ –ª–∏—Ü–æ –ø–æ–¥ –º–∞—Å–∫–æ–π –≤—Å—Ç—É–ø–∏–ª–æ –≤ –∫—É–ª—å—Ç.\n"
        f"{mention} —Ç–µ–ø–µ—Ä—å {identity['name']} {identity['mask_symbol']}\n"
        f"<i>{identity['description']}</i>",
        parse_mode="HTML"
    )

#–∫–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üîÆ –í—Å—Ç—É–ø–∏—Ç—å –≤ –ö—É–ª—å—Ç", callback_data="join_cult"),
        InlineKeyboardButton("üïµÔ∏è –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –§–ë–†", callback_data="join_fbi")
    )
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç–æ—Ä–æ–Ω—É:", reply_markup=kb)
    
 ## ==== –û–ë–†–ê–ë–û–¢–ö–ê –û–†–£–ñ–ò–Ø ====   
@dp.message_handler(lambda message: message.text and message.text.startswith("weapon:"))
async def handle_weapon_qr(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or f"id:{user_id}"
    weapon_id_raw = safe_get_weapon_id(message.text)

    if not weapon_id_raw:  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –ø—Ä–æ–≤–µ—Ä—è–µ–º –î–û –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–∏–¥–µ:\n"
            "<code>weapon:ABC123</code>", 
            parse_mode="HTML"
        )
        print(f"[DEBUG] –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç weapon_id –æ—Ç {username}: '{message.text}'")
        return
    weapon_id = normalize_weapon_id(weapon_id_raw)

    if len(weapon_id) < 2:
        await message.reply("‚ùå ID –æ—Ä—É–∂–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.")
        print(f"[DEBUG] –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π weapon_id –æ—Ç {username}: '{weapon_id}'")
        return

    if not EVENT_FILE.exists():
        await message.reply("‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∏—Ç—É–∞–ª–∞.")
        return

    try:
        with open(EVENT_FILE, encoding="utf-8") as f:
            event = json.load(f)
    except Exception as e:
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∏—Ç—É–∞–ª.")
        return

    try:
        with open(WEAPONS_FILE, encoding="utf-8") as f:
            weapons = json.load(f)
    except Exception as e:
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å weapons.json.")
        return

    # –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –Ω–∞–±–æ—Ä id –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –æ—Ä—É–∂–∏—è
    weapon_entry = next((w for w in weapons if w["name"] == event["weapon"]), None)

    if not weapon_entry:
        await message.reply("‚ùå –û—Ä—É–∂–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ.")
        return

    if weapon_id not in weapon_entry["ids"]:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID. –≠—Ç–æ –Ω–µ —Ç–æ –æ—Ä—É–∂–∏–µ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–∞–≤–∞–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–∞–≤–∞–ª –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    reports = load_all_reports()
    victim_key = str(event["victim_id"])

    if victim_key in reports:
        if any(r.get("user_id") == user_id for r in reports[victim_key]["reports"]):
            await message.reply("‚õî –¢—ã —É–∂–µ —Å–æ–æ–±—â–∏–ª –æ —Å–≤–æ—ë–º –æ—Ä—É–∂–∏–∏.")
            return

   
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º weapon_id –∑–∞ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Ç–µ–∫—É—â–µ–º —Ä–∏—Ç—É–∞–ª–µ
    event.setdefault("assigned_weapons", [])
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
    event["assigned_weapons"] = [w for w in event["assigned_weapons"] if w["user_id"] != user_id]

    event["assigned_weapons"].append({
        "user_id": user_id,
        "weapon_id": weapon_id
    })

    with open(EVENT_FILE, "w", encoding="utf-8") as f:
        json.dump(event, f, ensure_ascii=False, indent=2)

    await message.reply(f"üîê –¢–≤–æ–π ID –æ—Ä—É–∂–∏—è (<code>{weapon_id}</code>) –ø—Ä–∏–Ω—è—Ç. –ñ–¥—ë–º —Ñ–æ—Ç–æ —Ä–∏—Ç—É–∞–ª–∞.", parse_mode="HTML")

# ==== –ó–ê–ü–£–°–ö ====

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    loop = asyncio.get_event_loop()
    loop.create_task(auto_ritual_loop())
    executor.start_polling(
        dp,
        skip_updates=False,
        allowed_updates=[
            "message",
            "callback_query",
            "chat_member",
            "chat_join_request"
        ]
    )
