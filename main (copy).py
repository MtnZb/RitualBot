import os
import re
import json
import random
import asyncio
import cv2
from urllib.parse import urlparse, parse_qs
from aiogram.dispatcher.handler import CancelHandler, SkipHandler
from pathlib import Path
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.utils import executor
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from dotenv import load_dotenv
from datetime import datetime, timedelta
from aiogram.utils.markdown import quote_html
from aiogram.utils.exceptions import CantInitiateConversation
from photo_tools import ultra_obscured_version
from fbi import create_fbi_cases_for_victim



# –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
CULT_CHANNEL_ID = int(os.getenv("CULT_CHANNEL_ID"))
CONTROL_CHAT_ID = int(os.getenv("CONTROL_CHAT_ID"))
FBI_CHANNEL_ID = int(os.getenv("FBI_CHANNEL_ID"))

RITUAL_INTERVAL = 150
TZ_OFFSET = timedelta(hours=3)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
async def on_startup(dp):
    # —Å–Ω–∏–º–∞–µ–º –≤–µ–±—Ö—É–∫, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —Å polling
    await bot.delete_webhook(drop_pending_updates=True)

INVIS_RE = re.compile(r'[\u200B-\u200D\uFEFF]')  # zero-width & BOM

# üëâ –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã –§–ë–†
from fbi import register_fbi_handlers
register_fbi_handlers(dp)

ritual_loop_task = None



# –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
DATA_DIR = Path("data")
EVENT_FILE = Path("current_event.json")
REPORT_FILE = Path("ritual_reports.json")
SCORES_FILE = Path("scores.json")
PENDING_FILE = Path("pending_reports.json")
PLAYERS_FILE = Path("players.json")
WEAPONS_FILE = DATA_DIR / "weapons.json"
IDENTITIES_FILE = Path("data") / "cultist_identities.json"
MAX_REPORTS = 3

# –§–ª–∞–≥ —Ä–∞–±–æ—Ç—ã –∞–≤—Ç–æ-—Ä–∏—Ç—É–∞–ª–∞
auto_ritual_active = False

# –ó–∞–≥—Ä—É–∑–∫–∞ JSON

def load_json(filename):
    with open(DATA_DIR / filename, encoding="utf-8") as f:
        return json.load(f)

#def load_reports():
 #   if REPORT_FILE.exists():
  #      with open(REPORT_FILE, encoding="utf-8") as f:
   #         return json.load(f)
    #return {"victim_id": None, "reports": []}

#def save_reports(data):
 #   with open(REPORT_FILE, "w", encoding="utf-8") as f:
  #      json.dump(data, f, ensure_ascii=False, indent=2)


WEAPON_ALLOWED = re.compile(r"^[A-Z0-9\-]{2,32}$")

def is_valid_weapon_id(wid: str) -> bool:
    return bool(WEAPON_ALLOWED.match(wid))

def cult_onboarding_message() -> str:
    return (
        "üß≠ <b>–ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–∏—Ç—É–∞–ª–µ</b>\n"
        "1) –î–æ–∂–¥–∏—Å—å –∑–∞–¥–∞–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ –∫—É–ª—å—Ç–∞ (–∂–µ—Ä—Ç–≤–∞, —Ä–∏—Ç—É–∞–ª, –º–µ—Å—Ç–æ, –æ—Ä—É–∂–∏–µ).\n"
        "2) –û—Ç–ø—Ä–∞–≤—å –≤ –õ–° ID –æ—Ä—É–∂–∏—è: <code>weapon:QW34</code>\n"
        "   ‚Ä¢ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –Ω–µ –ø–æ–¥–æ–π–¥—ë—Ç: <code>–¢‚â†T</code>, <code>–•‚â†X</code>\n"
        "   ‚Ä¢ –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–æ QR ‚Äî —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Å–∞–º.\n"
        "3) –ü—Ä–∏—à–ª–∏ <b>–æ–¥–Ω–æ</b> —Ñ–æ—Ç–æ —Ä–∏—Ç—É–∞–ª–∞ –≤ –õ–° ‚Äî –æ–Ω–æ —É–π–¥—ë—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n"
        "‚ö†Ô∏è –í –≥—Ä—É–ø–ø–∞—Ö/–∫–∞–Ω–∞–ª–µ —Ñ–æ—Ç–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é ‚Äî —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ."
    )


def normalize_weapon_id(text):
    mapping = {
        "–ê":"A","–í":"B","–°":"C","–ï":"E","–ù":"H","–ö":"K","–ú":"M","–û":"O","–†":"P","–¢":"T","–•":"X","–£":"Y",
        "–Å":"E","–ô":"I","–Ü":"I","–á":"I"
    }
    if not text:
        return ""
    # –ø—Ä–∏–≤–æ–¥–∏–º NBSP –∫ –æ–±—ã—á–Ω–æ–º—É –ø—Ä–æ–±–µ–ª—É, —É–±–∏—Ä–∞–µ–º zero-width
    text = str(text).replace("\xa0", " ")
    text = INVIS_RE.sub("", text)
    # –æ–±—Ä–µ–∑–∞–µ–º –∫—Ä–∞—è –∏ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
    text = text.strip().upper()
    # —É–±–∏—Ä–∞–µ–º –í–°–ï –ø—Ä–æ–±–µ–ª—ã –≤–Ω—É—Ç—Ä–∏ (–¥–µ—Ñ–∏—Å—ã –æ—Å—Ç–∞–≤–ª—è–µ–º)
    text = text.replace(" ", "")
    # –∫–∏—Ä–∏–ª–ª–∏—Ü—É -> –ª–∞—Ç–∏–Ω–∏—Ü–∞
    return "".join(mapping.get(ch, ch) for ch in text)

def safe_get_weapon_id(text):
    if not text or "weapon:" not in text:
        return None  # –í–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

    weapon_id = text.split("weapon:", 1)[-1].strip()
    if len(weapon_id) < 2:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
        return None

    return weapon_id
    
def extract_weapon_from_qr(image_path: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç weapon_id –∏–∑ QR, –µ—Å–ª–∏ –Ω–∞ —Ñ–æ—Ç–æ –µ—Å—Ç—å:
      - https://t.me/<bot>?start=weapon-XXXX
      - tg://resolve?domain=<bot>&start=weapon-XXXX
      - –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç 'weapon-XXXX' –∏–ª–∏ 'weapon:XXXX'
    –ò–Ω–∞—á–µ None.
    """
    try:
        img = cv2.imread(str(image_path))
        if img is None:
            return None
        det = cv2.QRCodeDetector()
        data, _, _ = det.detectAndDecode(img)
        if not data:
            return None

        txt = data.strip()
        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ø–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞
        if txt.startswith("http://") or txt.startswith("https://") or txt.startswith("tg://"):
            try:
                u = urlparse(txt)
                qs = parse_qs(u.query)
                start_vals = qs.get("start") or []
                if start_vals:
                    payload = start_vals[0]
                    # –æ–∂–∏–¥–∞–µ–º weapon-XXXX
                    if payload.lower().startswith("weapon-"):
                        code = payload.split("-", 1)[-1]
                        return normalize_weapon_id(code)
            except Exception:
                pass

        # –í–∞—Ä–∏–∞–Ω—Ç 2: –≥–æ–ª—ã–π payload
        low = txt.lower()
        if low.startswith("weapon-"):
            return normalize_weapon_id(txt.split("-", 1)[-1])
        if low.startswith("weapon:"):
            return normalize_weapon_id(txt.split(":", 1)[-1])

        return None
    except Exception:
        return None


def load_all_reports():
    if REPORT_FILE.exists():
        with open(REPORT_FILE, encoding="utf-8") as f:
            return json.load(f)
    return {}
    
def load_pending_reports():
    if not os.path.exists("pending_reports.json"):
        return []

    with open("pending_reports.json", encoding="utf-8") as f:
        try:
            data = json.load(f)
            return data if isinstance(data, list) else []
        except Exception as e:
            print(f"[DEBUG] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è pending_reports.json: {e}")
            return []

def save_all_reports(data):
    with open(REPORT_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def add_report_entry(victim_id: str, victim_data: dict, report: dict):
    all_reports = load_all_reports()
    victim_key = str(victim_id)

    if victim_key not in all_reports:
        all_reports[victim_key] = {
            "victim_name": victim_data.get("victim_name"),
            "ritual": victim_data.get("ritual"),
            "place": victim_data.get("place"),
            "reports": []
        }
    # üëâ –Ω–æ–≤—ã–π –±–ª–æ–∫: —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞
    if len(all_reports[victim_key]["reports"]) >= MAX_REPORTS:
        print(f"[add_report_entry] ‚ö†Ô∏è –õ–∏–º–∏—Ç –æ—Ç—á—ë—Ç–æ–≤ –¥–ª—è –∂–µ—Ä—Ç–≤—ã {victim_key} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç")
        return False
        
    all_reports[victim_key]["reports"].append(report)
    save_all_reports(all_reports)
    return True

def load_scores():
    try:
        with open(SCORES_FILE, encoding="utf-8") as f:
            scores = json.load(f)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –æ—á–∫–∏: {scores}")
            return scores
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ scores.json: {e}")
        return {}

def save_scores(data):
    with open(SCORES_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def save_pending(data):
    with open(PENDING_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)
        
def load_players():
    if PLAYERS_FILE.exists():
        with open(PLAYERS_FILE, encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_players(players):
    with open(PLAYERS_FILE, "w", encoding="utf-8") as f:
        json.dump(players, f, ensure_ascii=False, indent=2)

def already_in_team(user_id, team=None):
    players = load_players()
    current = players.get(str(user_id))
    if not isinstance(current, dict):
        return None
    if team is None:
        return current
    return current if current.get("team") == team else None

def assign_team(user_id, team):
    players = load_players()
    entry = players.get(str(user_id), {})
    if not isinstance(entry, dict):
        entry = {"team": str(entry)} if entry else {}
    entry["team"] = team
    players[str(user_id)] = entry
    save_players(players)

# ==== –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê ====

async def run_ritual():
    victims = load_json("victims.json")
    rituals = load_json("rituals.json")
    weapons = load_json("weapons.json")
    places = load_json("places.json")

    auto_ritual_active = True
    
    try:
        with open("used_victims.json", encoding="utf-8") as f:
            content = f.read().strip()
            used_ids = json.loads(content) if content else []
    except FileNotFoundError:
        used_ids = []

    available_ids = [vid for vid in victims if str(vid) not in used_ids]
    if not available_ids:
        await bot.send_message(CULT_CHANNEL_ID, "–í—Å–µ –∂–µ—Ä—Ç–≤—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã.")
        return

    try:
        if EVENT_FILE.exists():
            with open(EVENT_FILE, encoding="utf-8") as f:
                prev_event = json.load(f)
            prev_victim_id = prev_event.get("victim_id")
            if prev_victim_id is not None:
                # —Å–æ–∑–¥–∞—ë–º –¥–µ–ª–∞ –¥–ª—è –§–ë–† –ø–æ –≤—Å–µ–º –ø—Ä–∏–Ω—è—Ç—ã–º –æ—Ç—á—ë—Ç–∞–º R1..R3, –ø–æ—Å—Ç–∏–º –≤ –∫–∞–Ω–∞–ª –§–ë–†
                created = await create_fbi_cases_for_victim(prev_victim_id, bot, FBI_CHANNEL_ID)
                if created:
                    print(f"[FBI] –°–æ–∑–¥–∞–Ω–æ –¥–µ–ª –ø–æ –∂–µ—Ä—Ç–≤–µ {prev_victim_id}: {created}")
    except Exception as e:
        print(f"[FBI] –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∏–≤–µ–Ω—Ç–∞: {e}")

    victim_id = random.choice(available_ids)
    victim = victims[victim_id]

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–µ–Ω–Ω–æ –∫–ª—é—á (victim_id), –∞ –Ω–µ victim["id"]
    used_ids.append(victim_id)
    with open("used_victims.json", "w", encoding="utf-8") as f:
        json.dump(used_ids, f, ensure_ascii=False, indent=2)

    ritual = random.choice(rituals)
    weapon_entry = random.choice(weapons)
    weapon = weapon_entry["name"]
    place = random.choice(places)

    event = {
        "victim_id": victim_id,
        "victim_name": victim["name"],
        "victim_description": victim["description"],
        "victim_photo": victim["photo"],
        "ritual": ritual,
        "weapon": weapon,
        "place": place,
        "assigned_weapons": []
    }

    with open(EVENT_FILE, "w", encoding="utf-8") as f:
        json.dump(event, f, ensure_ascii=False, indent=2)

    text = (
        f"\U0001F52E <b>–ù–û–í–´–ô –†–ò–¢–£–ê–õ</b>\n"
        f"–ñ–µ—Ä—Ç–≤–∞: {event['victim_name']} ({event['victim_description']})\n"
        f"–û—Ä—É–¥–∏–µ: {event['weapon']}\n"
        f"–†–∏—Ç—É–∞–ª: {event['ritual']}\n"
        f"–ú–µ—Å—Ç–æ: {event['place']}"
    )

    with open(event['victim_photo'], "rb") as photo:
        await bot.send_photo(
            chat_id=CULT_CHANNEL_ID,
            photo=photo,
            caption=text,
            parse_mode="HTML"
        )

# ==== –†–£–ß–ù–´–ï –ö–û–ú–ê–ù–î–´ ====

@dp.message_handler(commands=["—Ä–∏—Ç—É–∞–ª"])
async def start_ritual_loop(message: types.Message):
    global ritual_loop_task

    if message.from_user.id != ADMIN_ID:
        return  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç

    if ritual_loop_task and not ritual_loop_task.done():
        await message.reply("üîÑ –¶–∏–∫–ª —Ä–∏—Ç—É–∞–ª–æ–≤ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")
        return

    async def auto_ritual_loop():
        while True:
            await run_ritual()
            await asyncio.sleep(RITUAL_INTERVAL)  # 2,5 –º–∏–Ω—É—Ç

    ritual_loop_task = asyncio.create_task(auto_ritual_loop())
    pretty = f"{RITUAL_INTERVAL//60} –º–∏–Ω" if RITUAL_INTERVAL % 60 == 0 else f"{RITUAL_INTERVAL} —Å–µ–∫"
    await message.reply(f"üîÆ –¶–∏–∫–ª —Ä–∏—Ç—É–∞–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω. –ö–∞–∂–¥—ã–µ {pretty} –±—É–¥–µ—Ç –Ω–æ–≤–∞—è –∂–µ—Ä—Ç–≤–∞.")

@dp.message_handler(commands=["—Å—Ç–æ–ø"])
async def stop_ritual_loop(message: types.Message):
    global ritual_loop_task

    if message.from_user.id != ADMIN_ID:
        return  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç

    if not ritual_loop_task or ritual_loop_task.done():
        await message.reply("‚õî –¶–∏–∫–ª —Ä–∏—Ç—É–∞–ª–æ–≤ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        return

    ritual_loop_task.cancel()
    ritual_loop_task = None
    await message.reply("üõë –¶–∏–∫–ª —Ä–∏—Ç—É–∞–ª–æ–≤ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


@dp.message_handler(commands=["–æ—á–∫–∏"])
async def show_scores(message: types.Message):
    scores = load_scores()
    players = load_players()
    user_id = str(message.from_user.id)

    # –ï—Å–ª–∏ –ø—É—Å—Ç–æ ‚Äî –±—ã—Å—Ç—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥
    if not scores:
        if message.chat.id == FBI_CHANNEL_ID:
            await message.reply("–ü–æ–∫–∞ –Ω–∏ —É –∫–æ–≥–æ –∏–∑ –§–ë–† –Ω–µ—Ç –æ—á–∫–æ–≤.")
        else:
            await message.reply("–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–ª–∏–ª –∫—Ä–æ–≤—å.")
        return

    # === –†–µ–∂–∏–º –§–ë–†-–∫–∞–Ω–∞–ª–∞ ===
    if message.chat.id == FBI_CHANNEL_ID:
        # –ú–æ–∏ –æ—á–∫–∏
        my_score = scores.get(user_id, 0)

        # –°–æ–±–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç–æ–≤ –§–ë–†
        fbi_ids = [
            uid for uid, pdata in players.items()
            if isinstance(pdata, dict) and pdata.get("team") == "fbi"
        ]
        fbi_scores = [(uid, scores.get(uid, 0)) for uid in fbi_ids]

        if not fbi_scores:
            await message.reply(
                f"üïµÔ∏è –¢–≤–æ–∏ –æ—á–∫–∏: {my_score}\n"
                f"–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å—Ä–µ–¥–∏ –§–ë–†.", parse_mode="HTML"
            )
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –æ—á–∫–∞–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
        fbi_scores.sort(key=lambda x: x[1], reverse=True)
        top_10 = fbi_scores[:10]

        # –†–∏—Å—É–µ–º —Ç–æ–ø
        lines = [
            f"üïµÔ∏è <b>–¢–≤–æ–∏ –æ—á–∫–∏:</b> {my_score}",
            "üèÜ <b>–¢–æ–ø-10 –§–ë–†</b>:"
        ]
        for i, (uid, sc) in enumerate(top_10, 1):
            mention = f"<a href='tg://user?id={uid}'>–ê–≥–µ–Ω—Ç</a>"
            lines.append(f"{i}. {mention}: {sc}")

        await message.reply("\n".join(lines), parse_mode="HTML")
        return

    # === –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–Ω–∞–ª –∫—É–ª—å—Ç–∞) ‚Äî –∫–∞–∫ –±—ã–ª–æ ===
    sorted_scores = sorted(scores.items(), key=lambda x: x[1], reverse=True)
    top_10 = sorted_scores[:10]

    text = "üèÜ <b>–¢–æ–ø-10 –∫—É–ª—å—Ç–∏—Å—Ç–æ–≤</b>:\n"
    for i, (uid, score) in enumerate(top_10, 1):
        mention = f"<a href='tg://user?id={uid}'>–ö—É–ª—å—Ç–∏—Å—Ç</a>"
        text += f"{i}. {mention}: {score} –æ—á–∫–æ–≤\n"

    await message.reply(text, parse_mode="HTML")


# ==== –§–û–ù–û–í–ê–Ø –ó–ê–î–ê–ß–ê ====

async def auto_ritual_loop():
    global auto_ritual_active
    while True:
        if auto_ritual_active:
            try:
                await run_ritual()
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ-—Ä–∏—Ç—É–∞–ª–µ: {e}")
        await asyncio.sleep(15)
        
# ==== –ü–†–ò–Å–ú QR –° –û–†–£–ñ–ò–ï–ú (—Ñ–æ—Ç–æ –≤ –õ–°) ====
@dp.message_handler(lambda m: m.chat.type == "private", content_types=types.ContentType.PHOTO)
async def handle_weapon_qr_photo(message: types.Message):
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    photo = message.photo[-1]
    os.makedirs("tmp", exist_ok=True)
    tmp_path = Path("tmp") / f"qr_{message.from_user.id}_{photo.file_unique_id}.jpg"
    await photo.download(destination_file=tmp_path)

    wid = extract_weapon_from_qr(str(tmp_path))
    try:
        tmp_path.unlink(missing_ok=True)
    except Exception:
        pass

    if not wid:
        # –î–∞–π –ø—Ä–æ–π—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö–µ–Ω–¥–ª–µ—Ä—É (handle_report)
        raise SkipHandler()

    # –ù–∞—à–ª–∏ weapon_id ‚Äî –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–≤–æ–¥–∏–º —á–µ—Ä–µ–∑ –æ–±—â–∏–π –ø–∞–π–ø–ª–∞–π–Ω
    if not is_valid_weapon_id(wid):
        await message.reply("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≤ QR. –†–∞–∑—Ä–µ—à–µ–Ω—ã A‚ÄìZ, 0‚Äì9 –∏ ¬´-¬ª, –¥–ª–∏–Ω–∞ 2‚Äì32.")
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã, —á—Ç–æ–±—ã —ç—Ç–æ —Ñ–æ—Ç–æ –Ω–µ —É—à–ª–æ –∫–∞–∫ –æ—Ç—á—ë—Ç
        raise CancelHandler()

    await process_weapon_submission(message, wid)
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã (–∏–Ω–∞—á–µ —ç—Ç–æ —Ñ–æ—Ç–æ –ø–æ–ø–∞–¥—ë—Ç –≤ –º–æ–¥–µ—Ä–∞—Ü–∏—é –∫–∞–∫ –æ—Ç—á—ë—Ç)
    raise CancelHandler()
# ==== –ü–†–ò–Å–ú –û–¢–ß–Å–¢–û–í ====

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_report(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or f"id:{user_id}"

    # ‚úÖ –¢–µ–ø–µ—Ä—å –æ—Ç—á—ë—Ç—ã –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ
    if message.chat.type != "private":
        # –º—è–≥–∫–æ –ø–æ–¥—Å–∫–∞–∂–µ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        await message.reply("‚õî –§–æ—Ç–æ-–æ—Ç—á—ë—Ç –ø—Ä–∏—Å—ã–ª–∞–π **–º–Ω–µ –≤ –ª–∏—á–∫—É**. –í –∫–∞–Ω–∞–ª –ø–æ–ø–∞–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏–Ω—è—Ç—ã–π –æ—Ç—á—ë—Ç.")
        return
    if not EVENT_FILE.exists():
        await message.reply("‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∏—Ç—É–∞–ª–∞.")
        print(f"[DEBUG] ‚ùå –§–∞–π–ª {EVENT_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    try:
        with open(EVENT_FILE, encoding="utf-8") as f:
            event = json.load(f)
    except Exception as e:
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è.")
        print(f"[DEBUG] ‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è EVENT_FILE: {e}")
        return



    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –ø—Ä–∏—Å—ã–ª–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å weapon_id
    assigned_weapons = event.get("assigned_weapons", [])
    user_weapon = next((w for w in assigned_weapons if w["user_id"] == user_id), None)

    if not user_weapon:
        try:
            me = await bot.get_me()
            await message.reply(
                "‚õî –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ ID –æ—Ä—É–∂–∏—è.\n\n"
                "1) –û—Ç–ø—Ä–∞–≤—å –≤ –õ–° —Å–æ–æ–±—â–µ–Ω–∏–µ: <code>weapon:QW34</code>\n"
                "   ‚Ä¢ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ –Ω–µ –ø–æ–¥–æ–π–¥—ë—Ç: <code>–¢‚â†T</code>, <code>–•‚â†X</code>\n"
                "2) –ò–ª–∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ QR —Å –∫–æ–¥–æ–º ‚Äî —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é –µ–≥–æ —Å–∞–º.\n\n"
                f"üëâ –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –∑–∞–∫—Ä—ã—Ç: <a href='https://t.me/{me.username}'>–æ—Ç–∫—Ä—ã—Ç—å –õ–° —Å–æ –º–Ω–æ–π</a>",
                parse_mode="HTML"
            )
        except Exception:
            await message.reply(
                "‚õî –°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ ID –æ—Ä—É–∂–∏—è: <code>weapon:QW34</code>\n"
                "–ò–ª–∏ –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ QR ‚Äî —è –≤—ã—Ç–∞—â—É –∫–æ–¥ —Å–∞–º.",
                parse_mode="HTML"
            )
        print(f"[DEBUG] ‚õî –û—Ç—á—ë—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω ‚Äî –Ω–µ —É–∫–∞–∑–∞–Ω weapon_id –æ—Ç {username}")
        return

    pending = load_pending_reports()

    if any(r.get("user_id") == user_id and r.get("victim_id") == event["victim_id"] for r in pending):
        await message.reply(f"‚õî @{username}, —Ç—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –æ—Ç—á—ë—Ç. –û–∂–∏–¥–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞.")
        print(f"[DEBUG] ‚õî –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –æ—Ç—á—ë—Ç –æ—Ç {username}")
        return

    try:
        with open(Path("data") / "weapons.json", encoding="utf-8") as f:
            weapons = json.load(f)
        matched = next((w for w in weapons if user_weapon["weapon_id"] in w.get("ids", [])), None)
        weapon_name = matched.get("name") if matched else None

        if not matched:
            print(f"[DEBUG] ‚ùå –û—Ä—É–∂–∏–µ —Å ID {user_weapon['weapon_id']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ø–∏—Å–∫–µ weapons.")
        else:
            print(f"[DEBUG] ‚úÖ –ù–∞–π–¥–µ–Ω–æ –æ—Ä—É–∂–∏–µ: {weapon_name}")
    except Exception as e:
        print(f"[DEBUG] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å weapon_name: {e}")

    all_reports = load_all_reports()
    victim_key = str(event["victim_id"])
    # üëâ –Ω–æ–≤—ã–π –±–ª–æ–∫: –ª–∏–º–∏—Ç —É–∂–µ –ø—Ä–∏–Ω—è—Ç—ã—Ö –æ—Ç—á—ë—Ç–æ–≤
    if victim_key in all_reports and len(all_reports[victim_key]["reports"]) >= MAX_REPORTS:
        await message.reply("‚õî –õ–∏–º–∏—Ç –æ—Ç—á—ë—Ç–æ–≤ –ø–æ —ç—Ç–æ–π –∂–µ—Ä—Ç–≤–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –î–µ–ª–æ –∑–∞–∫—Ä—ã—Ç–æ.")
        print(f"[DEBUG] ‚õî –õ–∏–º–∏—Ç –æ—Ç—á—ë—Ç–æ–≤ –¥–ª—è {victim_key} –¥–æ—Å—Ç–∏–≥–Ω—É—Ç")
        return
        
    if victim_key in all_reports:
        if any(r.get("user_id") == user_id for r in all_reports[victim_key]["reports"]):
            await message.reply("‚õî –¢—ã —É–∂–µ –ø—Ä–∏—Å—ã–ª–∞–ª –æ—Ç—á—ë—Ç –ø–æ —ç—Ç–æ–º—É —Ä–∏—Ç—É–∞–ª—É.")
            print(f"[DEBUG] ‚õî {username} —É–∂–µ —Å–¥–∞–≤–∞–ª –æ—Ç—á—ë—Ç –ø–æ –∂–µ—Ä—Ç–≤–µ {victim_key}")
            return

    photo = message.photo[-1]
    filename = f"ritual_{event['victim_id']}_{user_id}.jpg"
    os.makedirs("reports", exist_ok=True)
    destination = Path("reports") / filename
    await photo.download(destination_file=destination)
    print(f"[DEBUG] –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {destination}")

    await message.reply("üì∏ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    

    caption = (
        f"üßæ –û—Ç—á—ë—Ç –æ—Ç @{username}\n"
        f"–ñ–µ—Ä—Ç–≤–∞: {event.get('victim_name')}\n"
        f"–†–∏—Ç—É–∞–ª: {event['ritual']}\n"
        f"–û—Ä—É–¥–∏–µ: {user_weapon['weapon_id']}\n"
        f"–ú–µ—Å—Ç–æ: {event['place']}"
    )

    try:
        with open(destination, "rb") as f:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å message_id
            sent_message = await bot.send_photo(CONTROL_CHAT_ID, photo=f, caption=caption)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–∂–µ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º message_id
        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept:{sent_message.message_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{sent_message.message_id}")
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await bot.edit_message_reply_markup(
            chat_id=CONTROL_CHAT_ID,
            message_id=sent_message.message_id,
            reply_markup=kb
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç –≤ pending
        pending.append({
            "user_id": user_id,
            "username": username,
            "weapon_id": user_weapon["weapon_id"],
            "weapon": weapon_name,  # –ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä—É–∂–∏—è
            "victim_id": event["victim_id"],
            "victim_name": event.get("victim_name"),
            "ritual": event.get("ritual"),
            "place": event.get("place"),
            "photo_file": photo.file_id,
            "message_id": sent_message.message_id
        })

        with open("pending_reports.json", "w", encoding="utf-8") as f:
            json.dump(pending, f, ensure_ascii=False, indent=2)

    except Exception as e:
        print(f"[ERROR] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É: {e}")
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
        return


# ==== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö ====


@dp.callback_query_handler(lambda c: c.data.startswith("accept") or c.data.startswith("reject"))
async def process_callback(call: CallbackQuery):
    action, msg_id = call.data.split(":")
    pending = load_pending_reports()
    msg_id = call.data.split(":")[1]
    entry = next((r for r in pending if str(r.get("message_id", "")) == msg_id), None)



    if not entry:
        await call.answer("‚õî –û—Ç—á—ë—Ç —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω.", show_alert=True)
        return

    user_id = entry["user_id"]
    username = entry["username"]

    if action == "accept":
        # –¥–∞–Ω–Ω—ã–µ
        ritual = entry.get("ritual")
        place = entry.get("place")
        weapon_name = entry.get("weapon")
        weapon_id = entry.get("weapon_id")
        victim_id = entry.get("victim_id")

        # –ª–∏–º–∏—Ç –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
        all_reports = load_all_reports()
        vk = str(victim_id)
        if vk in all_reports and len(all_reports[vk]["reports"]) >= MAX_REPORTS:
            await call.answer("‚õî –õ–∏–º–∏—Ç –æ—Ç—á—ë—Ç–æ–≤ –ø–æ —ç—Ç–æ–π –∂–µ—Ä—Ç–≤–µ —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.", show_alert=True)
            return

        # identity_id, –¥–∞–∂–µ –µ—Å–ª–∏ –≤ –§–ë–†
        players = load_players()
        player = players.get(str(user_id), {})
        identity_id = player.get("identity_id")

        # –≥–æ—Ç–æ–≤–∏–º –æ—Ç—á—ë—Ç
        photo_file_id = call.message.photo[-1].file_id if call.message.photo else None
        timestamp = (datetime.utcnow() + TZ_OFFSET).isoformat()
        report_entry = {
            "user_id": user_id,
            "identity_id": identity_id,
            "weapon_id": weapon_id,
            "weapon_name": weapon_name,
            "photo_file_id": photo_file_id,
            "timestamp": timestamp
        }

        # –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É
        ok = add_report_entry(victim_id, {
            "victim_name": entry.get("victim_name"),
            "ritual": ritual,
            "place": place
        }, report_entry)

        if not ok:
            await call.answer("‚õî –õ–∏–º–∏—Ç –æ—Ç—á—ë—Ç–æ–≤ –ø–æ —ç—Ç–æ–π –∂–µ—Ä—Ç–≤–µ —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç.", show_alert=True)
            return

        # —É—Å–ø–µ—Ö -> —É–¥–∞–ª—è–µ–º –∏–∑ pending
        if entry in pending:
            pending.remove(entry)
            save_pending(pending)
        
        # –Ω–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏
        scores = load_scores()
        scores[str(user_id)] = scores.get(str(user_id), 0) + 1
        save_scores(scores)

        # –æ–±–Ω–æ–≤–ª—è–µ–º caption
        old_caption = call.message.caption or ""
        new_caption = old_caption + f"\n‚úÖ –û—á–∫–∏ –Ω–∞—á–∏—Å–ª–µ–Ω—ã ({scores[str(user_id)]})"
        await call.message.edit_caption(new_caption)
        await bot.send_message(CULT_CHANNEL_ID, f"‚úÖ @{username}, –æ—Ç—á—ë—Ç –ø—Ä–∏–Ω—è—Ç. –£ –Ω–µ–≥–æ {scores[str(user_id)]} –æ—á–∫–æ–≤.")

        # ‚úÖ –î—É–±–ª–∏—Ä—É–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É –∞–≤—Ç–æ—Ä—É –æ—Ç—á—ë—Ç–∞
        try:
            await bot.send_message(
                user_id,
                (
                    "‚úÖ –¢–≤–æ–π –æ—Ç—á—ë—Ç –ø—Ä–∏–Ω—è—Ç!\n"
                    f"–ñ–µ—Ä—Ç–≤–∞: {entry.get('victim_name')}\n"
                    f"–†–∏—Ç—É–∞–ª: {ritual}\n"
                    f"–û—Ä—É–¥–∏–µ: {weapon_name or weapon_id}\n"
                    f"–ú–µ—Å—Ç–æ: {place}\n\n"
                    "üèÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ: +1 –æ—á–∫–æ\n"
                    f"üí∞ –¢–≤–æ–π —Å—á—ë—Ç: {scores[str(user_id)]}\n\n"
                    "–°–ª–µ–¥–∏ –∑–∞ –∫–∞–Ω–∞–ª–æ–º –∫—É–ª—å—Ç–∞ ‚Äî –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –±–ª–∏–∑–∫–æ."
                )
            )
        except Exception as e:
            print(f"[DEBUG] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É: {e}")
        # ‚úÖ –ü—É–±–ª–∏–∫—É–µ–º –ø—Ä–∏–Ω—è—Ç—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –∫–∞–Ω–∞–ª –∫—É–ª—å—Ç–∞
        try:
            # –±–µ—Ä—ë–º —Ç–æ –∂–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—à–ª–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é
            final_caption = (
                f"üßæ –ü—Ä–∏–Ω—è—Ç—ã–π –æ—Ç—á—ë—Ç –æ—Ç @{username}\n"
                f"–ñ–µ—Ä—Ç–≤–∞: {entry.get('victim_name')}\n"
                f"–†–∏—Ç—É–∞–ª: {ritual}\n"
                f"–û—Ä—É–¥–∏–µ: {weapon_name or weapon_id}\n"
                f"–ú–µ—Å—Ç–æ: {place}"
            )
            # –≤ –∫–æ–Ω—Ç—Ä–æ–ª-—á–∞—Ç–µ —É –Ω–∞—Å –µ—Å—Ç—å –æ–±—ä–µ–∫—Ç —Å —Ñ–æ—Ç–æ; –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å –ø–æ file_id
            if call.message.photo:
                file_id = call.message.photo[-1].file_id
                await bot.send_photo(CULT_CHANNEL_ID, photo=file_id, caption=final_caption)
            else:
                # fallback, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ—Ç photo –≤ —Å–∞–º–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ (—Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π)
                await bot.send_message(CULT_CHANNEL_ID, final_caption)
        except Exception as e:
            print(f"[DEBUG] ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª –∫—É–ª—å—Ç–∞: {e}")

    elif action == "reject":
        if entry in pending:
            pending.remove(entry)
            save_pending(pending)
            
        try:
            new_caption = (call.message.caption or "") + "\n‚ùå –û—Ç—á—ë—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω"
            await call.message.edit_caption(new_caption)
        except Exception as e:
            print(f"[DEBUG] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å caption: {e}")

        # –£–≤–µ–¥–æ–º–∏–º –∏–≥—Ä–æ–∫–∞
        try:
            await bot.send_message(user_id, "‚ùå –†–∏—Ç—É–∞–ª –Ω–µ –ø—Ä–∏–Ω—è—Ç. –î–µ—Ä–µ–≤–æ –æ—Ç–≤–µ—Ä–≥–ª–æ —Ç–≤–æ—ë –ø–æ–¥–Ω–æ—à–µ–Ω–∏–µ.")
        except Exception as e:
            print(f"[DEBUG] ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        await call.answer("‚ùå –û—Ç—á—ë—Ç –æ—Ç–∫–ª–æ–Ω—ë–Ω.")

        


#–í—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É
# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –§–ë–†
@dp.callback_query_handler(lambda c: c.data in ["join_cult", "join_fbi"])
async def handle_team_selection(call: types.CallbackQuery):
    user_id = call.from_user.id
    username = call.from_user.username or f"id:{user_id}"
    players = load_players()
    scores = load_scores()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    current_player = players.get(str(user_id))

    if call.data == "join_cult":
        # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ –≤ –§–ë–† ‚Äî –æ—Ç–∫–ª–æ–Ω–∏—Ç—å
        if current_player and isinstance(current_player, dict) and current_player.get("team") == "fbi":
            await call.message.edit_text("‚ùå –¢—ã —É–∂–µ –≤ –§–ë–†. –ö—É–ª—å—Ç –æ—Ç–≤–µ—Ä–≥–∞–µ—Ç —Ç–µ–±—è.")
            return

        # –ï—Å–ª–∏ —É–∂–µ –≤ –∫—É–ª—å—Ç–µ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –≤ –∫–∞–Ω–∞–ª–µ
        if current_player and isinstance(current_player, dict) and current_player.get("team") == "cult":
            try:
                member = await bot.get_chat_member(CULT_CHANNEL_ID, user_id)
                if member.status not in ("left", "kicked"):
                    await call.message.edit_text("‚õî –¢—ã —É–∂–µ –≤ –∫—É–ª—å—Ç–µ.")
                    return
                else:
                    # –í—ã—à–µ–ª ‚Äî —Ä–∞–∑—Ä–µ—à–∏–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ
                    pass
            except Exception as e:
                await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {e}")
                await call.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ. –û–±—Ä–∞—Ç–∏—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return

        # –ù–∞–∑–Ω–∞—á–∞–µ–º –ª–∏—á–Ω–æ—Å—Ç—å –∫—É–ª—å—Ç–∏—Å—Ç—É
        try:
            with open(IDENTITIES_FILE, encoding="utf-8") as f:
                identities = json.load(f)
        except Exception as e:
            await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ cultist_identities.json: {e}")
            await call.message.edit_text("‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –û–±—Ä—è–¥ –ø—Ä–µ—Ä–≤–∞–ª–∏.")
            return

        identity = random.choice(identities)

        players[str(user_id)] = {
            "team": "cult",
            "identity_id": identity["id"]
        }
        save_players(players)

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–Ω–≤–∞–π—Ç
        try:
            invite = await bot.create_chat_invite_link(chat_id=CULT_CHANNEL_ID, member_limit=1, creates_join_request=False)
            invite_link = invite.invite_link
        except Exception as e:
            await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç–∞: {e}")
            invite_link = "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏"

        text = (
            f"üîÆ <b>–¢—ã —Ç–µ–ø–µ—Ä—å —á–∞—Å—Ç—å –Ω–∞—Å</b>\n"
            f"<b>–¢–≤–æ—è –ª–∏—á–Ω–æ—Å—Ç—å:</b> {identity['name']} {identity['mask_symbol']}\n"
            f"<i>{identity['description']}</i>\n\n"
            f"–ó–∞–ø–æ–º–Ω–∏: —Ç—ã ‚Äî –º–∞—Å–∫–∞, –∞ –Ω–µ —á–µ–ª–æ–≤–µ–∫. –ù–æ—Å–∏ –µ—ë. –ò –Ω–µ –≥–æ–≤–æ—Ä–∏ –≤—Å–ª—É—Ö —Å–≤–æ—ë –∏–º—è.\n\n"
            f"‚û°Ô∏è –í—Å—Ç—É–ø–∏ –≤ –∫—É–ª—å—Ç: {invite_link}"
        )
        await call.message.edit_text(text, parse_mode="HTML")
        # ‚ûï –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–∏—á–∫—É –ø–æ—à–∞–≥–æ–≤—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –õ–°
        try:
            await bot.send_message(
                user_id,
                cult_onboarding_message(),
                parse_mode="HTML",
                disable_web_page_preview=True
            )
        except CantInitiateConversation:
            # –µ—Å–ª–∏ –õ–° –∑–∞–∫—Ä—ã—Ç ‚Äî –¥–∞–¥–∏–º —Å—Å—ã–ª–∫—É-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä—è–º–æ —Ç–∞–º, –≥–¥–µ –æ–Ω –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
            try:
                me = await bot.get_me()
                await call.message.answer(
                    "‚ÑπÔ∏è –û—Ç–∫—Ä–æ–π –ª–∏—á–∫—É —Å–æ –º–Ω–æ–π, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: "
                    f"<a href='https://t.me/{me.username}'>–ø–µ—Ä–µ–π—Ç–∏ –≤ –õ–°</a>",
                    parse_mode="HTML", disable_web_page_preview=True
                )
            except Exception:
                pass

    else:  # join_fbi
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –§–ë–†

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —É–∂–µ –≤ –§–ë–†
        if current_player and isinstance(current_player, dict) and current_player.get("team") == "fbi":
            await call.message.edit_text("‚õî –¢—ã —É–∂–µ –≤ –§–ë–†.")
            return

        # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –±—ã–ª –≤ –∫—É–ª—å—Ç–µ - –ø—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ
        if current_player and isinstance(current_player, dict) and current_player.get("team") == "cult":
            print(f"[DEBUG] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –±—ã–ª –≤ –∫—É–ª—å—Ç–µ, –ø—Ä–∏–º–µ–Ω—è–µ–º —à—Ç—Ä–∞—Ñ")

            # –ú–∏–Ω—É—Å 10 –æ—á–∫–æ–≤ –∑–∞ –ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ
            current_score = scores.get(str(user_id), 0)
            new_score = current_score - 10
            scores[str(user_id)] = new_score
            save_scores(scores)

            print(f"[DEBUG] –°—á–µ—Ç –∏–∑–º–µ–Ω–µ–Ω: {current_score} -> {new_score}")

            # 50% —à–∞–Ω—Å, —á—Ç–æ –∫—É–ª—å—Ç —É–∑–Ω–∞–µ—Ç
            if random.random() < 0.5:
                try:
                    await bot.send_message(
                        CULT_CHANNEL_ID,
                        f"üòà @{username} –ø–∞–ª –Ω–∏—Ü –∏ –ø–æ–ø—ã—Ç–∞–ª—Å—è —Å–±–µ–∂–∞—Ç—å –≤ –§–ë–†. –ö—É–ª—å—Ç –ø–æ–º–Ω–∏—Ç –ø—Ä–µ–¥–∞—Ç–µ–ª–µ–π..."
                    )
                    print(f"[DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫—É–ª—å—Ç")
                except Exception as e:
                    print(f"[DEBUG] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫—É–ª—å—Ç: {e}")
                    await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª –∫—É–ª—å—Ç–∞: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–¥–∞—Ç–µ–ª—é
            try:
                await bot.send_message(
                    user_id,
                    f"‚ùå –¢—ã –±—ã–ª –≤ –∫—É–ª—å—Ç–µ, –Ω–æ –§–ë–† –ø—Ä–∏–Ω—è–ª–æ —Ç–µ–±—è.\n"
                    f"üîª –®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ: -10 –æ—á–∫–æ–≤\n"
                    f"üí∞ –¢–≤–æ–π —Å—á–µ—Ç —Ç–µ–ø–µ—Ä—å: {new_score}"
                )
                print(f"[DEBUG] –°–æ–æ–±—â–µ–Ω–∏–µ –æ —à—Ç—Ä–∞—Ñ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                print(f"[DEBUG] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –ª–∏—á–∫—É, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
                penalty_text = f"‚ùå –®—Ç—Ä–∞—Ñ –∑–∞ –ø—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ: -10 –æ—á–∫–æ–≤. –°—á–µ—Ç: {new_score}\n\n"
            else:
                penalty_text = ""
        else:
            penalty_text = ""

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∫–æ–º–∞–Ω–¥—É –§–ë–†
        curr = players.get(str(user_id), {})
        players[str(user_id)] = {**curr, "team": "fbi"}
        save_players(players)
        

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–∞–π—Ç –≤ –§–ë–†
        try:
            invite = await bot.create_chat_invite_link(chat_id=FBI_CHANNEL_ID, member_limit=1, creates_join_request=False)
            invite_link = invite.invite_link
        except Exception as e:
            await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–∞–π—Ç–∞ –§–ë–†: {e}")
            invite_link = "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏"

        response_text = (
            f"{penalty_text}"
            f"üïµÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –§–ë–†. –£–ª–∏–∫–∏ –Ω–µ –∂–¥—É—Ç.\n"
            f"‚û°Ô∏è {invite_link}"
        )

        await call.message.edit_text(response_text)
        print(f"[DEBUG] –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –§–ë–† –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {username}")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –æ—á–∫–æ–≤
@dp.message_handler(commands=["debug_score"])
async def debug_score(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    user_id = message.from_user.id
    scores = load_scores()
    players = load_players()

    debug_info = f"""
üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
User ID: {user_id}
–¢–µ–∫—É—â–∏–µ –æ—á–∫–∏: {scores.get(str(user_id), 0)}
–ö–æ–º–∞–Ω–¥–∞: {players.get(str(user_id), "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞")}

–í—Å–µ –æ—á–∫–∏: {scores}
–í—Å–µ –∏–≥—Ä–æ–∫–∏: {players}
    """

    await message.reply(debug_info)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—á–∫–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
@dp.message_handler(commands=["set_score"])
async def set_score(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return

    try:
        parts = message.text.split()
        if len(parts) < 3:
            await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_score <user_id> <–æ—á–∫–∏>")
            return

        target_user_id = parts[1]
        new_score = int(parts[2])

        scores = load_scores()
        scores[target_user_id] = new_score
        save_scores(scores)

        await message.reply(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ—á–∫–∏ {new_score} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id}")

    except Exception as e:
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def safe_send_private_message(user_id, text):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        await bot.send_message(user_id, text)
        return True
    except Exception as e:
        print(f"[DEBUG] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        return False


#–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
@dp.chat_member_handler()
async def on_chat_member_update(update: types.ChatMemberUpdated):
    print("üì• –°–æ–±—ã—Ç–∏–µ chat_member –ø—Ä–∏—à–ª–æ!")
    if update.chat.id != CULT_CHANNEL_ID:
        return

    new_status = update.new_chat_member.status
    if new_status != "member":
        return  # –¢–æ–ª—å–∫–æ –≤—Å—Ç—É–ø–∏–≤—à–∏–µ

    user_id = update.new_chat_member.user.id
    players = load_players()
    player = players.get(str(user_id))

    if not player or player.get("team") != "cult":
        return

    identity_id = player.get("identity_id")
    if not identity_id:
        return

    try:
        with open(IDENTITIES_FILE, encoding="utf-8") as f:
            identities = json.load(f)
    except Exception as e:
        await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å cultist_identities.json: {e}")
        return

    identity = next((i for i in identities if i["id"] == identity_id), None)
    if not identity:
        return

    mention = update.new_chat_member.user.get_mention(as_html=True)
    await bot.send_message(
        CULT_CHANNEL_ID,
        f"üåí –ù–æ–≤–æ–µ –ª–∏—Ü–æ –ø–æ–¥ –º–∞—Å–∫–æ–π –≤—Å—Ç—É–ø–∏–ª–æ –≤ –∫—É–ª—å—Ç.\n"
        f"{mention} —Ç–µ–ø–µ—Ä—å {identity['name']} {identity['mask_symbol']}\n"
        f"<i>{identity['description']}</i>\n"
        f"‚ÑπÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –µ–º—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
        parse_mode="HTML"
    )

#–∫–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ä—Ç –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤
@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message, state: FSMContext):
    args = message.get_args() or ""

    # üîí –ü—É—Å—Ç—å fbi-—Ä–æ—É—Ç–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç /start fbi_*
    if args.lower().startswith("fbi_"):
        return
    # üëâ –°–ù–ê–ß–ê–õ–ê: –ø—Ä–∏—ë–º weapon —á–µ—Ä–µ–∑ deeplink
    if args.lower().startswith("weapon-"):
        payload = args.split("-", 1)[-1]
        return await process_weapon_submission(message, payload)


    # –û–±—ã—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üîÆ –í—Å—Ç—É–ø–∏—Ç—å –≤ –ö—É–ª—å—Ç", callback_data="join_cult"),
        InlineKeyboardButton("üïµÔ∏è –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –§–ë–†", callback_data="join_fbi")
    )
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ—é —Å—Ç–æ—Ä–æ–Ω—É:", reply_markup=kb)
    
async def process_weapon_submission(message: types.Message, weapon_payload: str):
    # 1) –¢–æ–ª—å–∫–æ –ª–∏—á–∫–∞
    if message.chat.type != "private":
        try:
            me = await bot.get_me()
            # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É –¥–∞—Ç—å —É–¥–æ–±–Ω—É—é —Å—Å—ã–ª–∫—É
            wid_hint = normalize_weapon_id(weapon_payload or "XXXX")
            deeplink = f"https://t.me/{me.username}?start=weapon-{wid_hint or 'XXXX'}"
            await message.reply(
                f"‚õî –û—Ç–ø—Ä–∞–≤—å ID –æ—Ä—É–∂–∏—è –º–Ω–µ –≤ –ª–∏—á–∫—É.\n"
                f"üëâ <a href='{deeplink}'>–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥</a>",
                parse_mode="HTML"
            )
        except Exception:
            await message.reply("‚õî –û—Ç–ø—Ä–∞–≤—å ID –æ—Ä—É–∂–∏—è –º–Ω–µ –≤ –ª–∏—á–∫—É.")
        return

    user_id = message.from_user.id
    username = message.from_user.username or f"id:{user_id}"

    # 2) –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è
    weapon_id = normalize_weapon_id(weapon_payload or "")
    if len(weapon_id) < 2:
        await message.reply("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π/—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ID. –ü—Ä–∏–º–µ—Ä: <code>weapon:ABC123</code>", parse_mode="HTML")
        return

    # 3) –ò–≤–µ–Ω—Ç
    if not EVENT_FILE.exists():
        await message.reply("‚ùå –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–∏—Ç—É–∞–ª–∞.")
        return
    try:
        with open(EVENT_FILE, encoding="utf-8") as f:
            event = json.load(f)
    except Exception:
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–∏—Ç—É–∞–ª.")
        return

    # 4) –û—Ä—É–∂–∏–µ –∏–∑ –±–∞–∑—ã
    try:
        with open(WEAPONS_FILE, encoding="utf-8") as f:
            weapons = json.load(f)
    except Exception:
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å weapons.json.")
        return

    weapon_entry = next((w for w in weapons if w.get("name") == event.get("weapon")), None)
    if not weapon_entry:
        await message.reply("‚ùå –û—Ä—É–∂–∏–µ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ.")
        return

    ids_list = weapon_entry.get("ids", [])
    ids_norm = {normalize_weapon_id(x) for x in ids_list if isinstance(x, str)}
    if weapon_id not in ids_norm:
        await message.reply(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID ‚Äî –æ–Ω –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–µ–∫—É—â–µ–º—É –æ—Ä—É–∂–∏—é.\n"
            f"üîé –°–µ–π—á–∞—Å –≤ –∑–∞–¥–∞–Ω–∏–∏: <b>{event.get('weapon')}</b>.\n"
            "–ü—Ä–æ–≤–µ—Ä—å QR/—Ä–∞—Å–∫–ª–∞–¥–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, <code>–¢‚â†T</code>, <code>–•‚â†X</code>) –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
            parse_mode="HTML"
        )
        return

    # 5) –ó–∞–ø—Ä–µ—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤ –ø–æ –æ—Ç—á—ë—Ç–∞–º (–µ—Å–ª–∏ —É–∂–µ —Å–¥–∞–≤–∞–ª –ø–æ —ç—Ç–æ–π –∂–µ—Ä—Ç–≤–µ)
    reports = load_all_reports()
    victim_key = str(event.get("victim_id"))
    if victim_key in reports:
        if any(r.get("user_id") == user_id for r in reports[victim_key].get("reports", [])):
            await message.reply("‚õî –¢—ã —É–∂–µ —Å–¥–∞–≤–∞–ª –æ—Ç—á—ë—Ç –ø–æ —ç—Ç–æ–º—É —Ä–∏—Ç—É–∞–ª—É.")
            return

    # 6) –°–æ—Ö—Ä–∞–Ω—è–µ–º weapon –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ —Ç–µ–∫—É—â–µ–º –∏–≤–µ–Ω—Ç–µ
    event.setdefault("assigned_weapons", [])
    event["assigned_weapons"] = [w for w in event["assigned_weapons"] if w.get("user_id") != user_id]
    event["assigned_weapons"].append({"user_id": user_id, "weapon_id": weapon_id})

    with open(EVENT_FILE, "w", encoding="utf-8") as f:
        json.dump(event, f, ensure_ascii=False, indent=2)

    await message.reply(
        f"üîê –¢–≤–æ–π ID –æ—Ä—É–∂–∏—è (<code>{weapon_id}</code>) –ø—Ä–∏–Ω—è—Ç.\n"
        f"üì∏ –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Ä–∏—Ç—É–∞–ª–∞ **–æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º** ‚Äî –æ–Ω–æ —É–π–¥—ë—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.",
        parse_mode="HTML"
    )


## ==== –û–ë–†–ê–ë–û–¢–ö–ê –û–†–£–ñ–ò–Ø ====   
@dp.message_handler(lambda m: m.text and re.match(r'^\s*weapon\s*:\s*', m.text, re.I))
async def handle_weapon_qr(message: types.Message):
    m = re.match(r'^\s*weapon\s*:\s*(.+)$', message.text, re.I | re.S)
    weapon_id_raw = m.group(1) if m else ""
    await process_weapon_submission(message, weapon_id_raw)

# ==== –ó–ê–ü–£–°–ö ====

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    loop = asyncio.get_event_loop()
    loop.create_task(auto_ritual_loop())
    executor.start_polling(
        dp,
        on_startup=on_startup,          # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏
        skip_updates=False,
        allowed_updates=[
            "message",
            "callback_query",
            "chat_member",
            "chat_join_request"
        ]
    )
