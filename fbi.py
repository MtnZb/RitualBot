import json
import hashlib
import random
import os
import cv2
from urllib.parse import urlparse, parse_qs
from pathlib import Path
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Dispatcher
from shared import load_players, load_all_reports, load_victims, load_cultists, load_rituals
from datetime import datetime, timedelta
TZ_OFFSET = timedelta(hours=3)
from photo_tools import ultra_obscured_version

REPORT_FILE = Path("ritual_reports.json")
VICTIMS_FILE = Path("victims.json")
CASES_FILE = Path("fbi_cases.json")
SCORES_FILE = Path("scores.json")
FBI_CHANNEL_ID = int(os.getenv("FBI_CHANNEL_ID", "0"))

class FBIReport(StatesGroup):
    choosing_case = State()
    choosing_victim = State()
    entering_weapon = State()
    choosing_mask = State()
    choosing_ritual = State()
    confirming = State()


def normalize_weapon_id(text):
    mapping = {
        "–ê": "A", "–í": "B", "–°": "C", "–ï": "E", "–ù": "H", "–ö": "K",
        "–ú": "M", "–û": "O", "–†": "P", "–¢": "T", "–•": "X", "–£": "Y"
    }
    text = text.strip().upper()
    return "".join(mapping.get(ch, ch) for ch in text)

def extract_weapon_from_qr(image_path: str):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç weapon_id –∏–∑ QR, –µ—Å–ª–∏ –Ω–∞ —Ñ–æ—Ç–æ –µ—Å—Ç—å:
      - https://t.me/<bot>?start=weapon-XXXX
      - tg://resolve?domain=<bot>&start=weapon-XXXX
      - –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç 'weapon-XXXX' –∏–ª–∏ 'weapon:XXXX'
    –ò–Ω–∞—á–µ None.
    """
    try:
        img = cv2.imread(str(image_path))
        if img is None:
            return None
        det = cv2.QRCodeDetector()
        data, _, _ = det.detectAndDecode(img)
        if not data:
            return None

        txt = (data or "").strip()
        low = txt.lower()

        # –í–∞—Ä–∏–∞–Ω—Ç 1: –ø–æ–ª–Ω–∞—è —Å—Å—ã–ª–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º start
        if low.startswith("http://") or low.startswith("https://") or low.startswith("tg://"):
            try:
                u = urlparse(txt)
                qs = parse_qs(u.query)
                start_vals = qs.get("start") or []
                if start_vals:
                    payload = start_vals[0]
                    if payload.lower().startswith("weapon-"):
                        code = payload.split("-", 1)[-1]
                        return normalize_weapon_id(code)
            except Exception:
                pass

        # –í–∞—Ä–∏–∞–Ω—Ç 2: "weapon-XXXX" –∏–ª–∏ "weapon:XXXX"
        if low.startswith("weapon-"):
            return normalize_weapon_id(txt.split("-", 1)[-1])
        if low.startswith("weapon:"):
            return normalize_weapon_id(txt.split(":", 1)[-1])

        return None
    except Exception:
        return None

def generate_case_code(victim_id: int) -> str:
    hash_bytes = hashlib.sha256(str(victim_id).encode()).digest()
    alphabet = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789"
    letters = ''.join(alphabet[b % len(alphabet)] for b in hash_bytes[:4])
    return f"RIT-{letters}"

def load_cases():
    if CASES_FILE.exists():
        with open(CASES_FILE, encoding="utf-8") as f:
            return json.load(f)
    return []

def load_scores():
    try:
        with open(SCORES_FILE, encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}

def save_scores(data):
    with open(SCORES_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def save_cases(cases):
    with open(CASES_FILE, "w", encoding="utf-8") as f:
        json.dump(cases, f, ensure_ascii=False, indent=2)

def get_open_cases():
    cases = load_cases()
    victims = load_victims()

    open_cases = []
    for c in cases:
        if c.get("status") != "open":
            continue
        victim_id = int(c.get("victim_id"))
        victim_name = c.get("victim_name") or victims.get(victim_id, {}).get("name")
        place = c.get("place")
        ritual = c.get("ritual")
        report_index = int(c.get("report_index", 0))
        created_at = c.get("created_at")
        try:
            short_time = (datetime.fromisoformat(created_at) + TZ_OFFSET).strftime("%H:%M")
        except Exception:
            short_time = "??:??"

        open_cases.append({
            # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç, —á—Ç–æ–±—ã UI –∏ FSM —Ä–∞–±–æ—Ç–∞–ª–∏ –±–µ–∑ –ø–µ—Ä–µ–¥–µ–ª–æ–∫
            "report_key": f"{victim_id}:{report_index}",
            "victim_id": victim_id,
            "report_index": report_index,
            "case_code": generate_case_code(victim_id),
            "victim_name": victim_name,
            "place": (place or "").strip().split()[-1] if place else "",
            "ritual": ritual,
            "time": short_time
        })
    return open_cases
def register_fbi_handlers(dp: Dispatcher):
    # /–¥–µ–ª–∞ ‚Äî —Å–ø–∏—Å–æ–∫ –¥–µ–ª —Ç–æ–ª—å–∫–æ –≤ –õ–° (+–∫–Ω–æ–ø–∫–∞ deeplink –∏–∑ –≥—Ä—É–ø–ø)
    @dp.message_handler(commands=["–¥–µ–ª–∞"])
    async def show_open_cases(message: types.Message, state: FSMContext):
        if message.chat.type != "private":
            me = await message.bot.get_me()
            kb = InlineKeyboardMarkup().add(
                InlineKeyboardButton(
                    text="–û—Ç–∫—Ä—ã—Ç—å –ª–∏—á–∫—É —Å –±–æ—Ç–æ–º",
                    url=f"https://t.me/{me.username}?start=fbi_cases"
                )
            )
            await message.reply("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ª–∏—á–∫–µ –±–æ—Ç—É.", reply_markup=kb)
            return

        user_id = message.from_user.id
        players = load_players()
        if players.get(str(user_id), {}).get("team") != "fbi":
            await message.reply("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç–∞–º –§–ë–†.")
            return

        open_cases = get_open_cases() or []
        if not open_cases:
            await message.reply("‚úÖ –í—Å–µ –¥–µ–ª–∞ –∑–∞–∫—Ä—ã—Ç—ã. –ñ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è.")
            return

        await message.reply(
            "üõ°Ô∏è <b>–ë—Ä–∏—Ñ–∏–Ω–≥ –§–ë–†</b>\n"
            "–ü–µ—Ä–µ–¥ –≤–∞–º–∏ ‚Äî –æ—Ç–∫—Ä—ã—Ç—ã–µ –¥–µ–ª–∞, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–∏–Ω—è—Ç—ã–º –æ—Ç—á—ë—Ç–∞–º –∫—É–ª—å—Ç–∞. "
            "–ö–∞–∂–¥–æ–µ –¥–µ–ª–æ –ø—Ä–∏–≤—è–∑–∞–Ω–æ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —ç–ø–∏–∑–æ–¥—É (R1‚ÄìR3). "
            "–í–∞—à–∞ –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —á–µ—Ç—ã—Ä–µ –ø—É–Ω–∫—Ç–∞: –∂–µ—Ä—Ç–≤–∞, –æ—Ä—É–∂–∏–µ, –º–∞—Å–∫–∞, —Ä–∏—Ç—É–∞–ª.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã.", parse_mode="HTML"
        )

        seen = set()
        kb = InlineKeyboardMarkup(row_width=1)
        for c in open_cases:
            rk = c.get("report_key")
            if not rk or rk in seen:
                continue
            seen.add(rk)
            label = f"üìÅ {c.get('case_code','RIT-?')} ¬∑ {c.get('place','?')} ¬∑ R{int(c.get('report_index',0))+1}"
            kb.add(InlineKeyboardButton(text=label, callback_data=f"fbi_case:{rk}"))

        await message.reply("üïµÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–ª–∞:", reply_markup=kb)
        await state.set_state(FBIReport.choosing_case.state)

    # /—Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å ‚Äî —Å—Ç–∞—Ä—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è —Ç–æ–ª—å–∫–æ –≤ –õ–° (+deeplink –∏–∑ –≥—Ä—É–ø–ø)
    @dp.message_handler(commands=["—Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å"], state="*")
    async def start_fbi_report(message: types.Message, state: FSMContext):
        if message.chat.type != "private":
            me = await message.bot.get_me()
            kb = InlineKeyboardMarkup().add(
                InlineKeyboardButton(
                    text="–û—Ç–∫—Ä—ã—Ç—å –ª–∏—á–∫—É —Å –±–æ—Ç–æ–º",
                    url=f"https://t.me/{me.username}?start=fbi_investigate"
                )
            )
            await message.reply("‚õî –†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤–µ–¥—ë—Ç—Å—è –≤ –ª–∏—á–∫–µ –±–æ—Ç—É.", reply_markup=kb)
            return

        user_id = message.from_user.id
        players = load_players()
        if players.get(str(user_id), {}).get("team") != "fbi":
            await message.reply("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç–∞–º –§–ë–†.")
            return

        cases = get_open_cases()
        if not cases:
            await message.reply("‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–µ–ª –¥–ª—è —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.")
            return

        kb = InlineKeyboardMarkup(row_width=1)
        for case in cases:
            label = f"{case['case_code']} ¬∑ R{case['report_index']+1} ¬∑ {case['place']} ¬∑ {case['time']}"
            kb.add(InlineKeyboardButton(text=label, callback_data=f"fbi_case:{case['report_key']}"))

        await message.reply(
            "üéØ <b>–ü—Ä–æ—Ç–æ–∫–æ–ª 12.3: –∑–∞–ø—É—Å–∫ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è</b>\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –¥–µ–ª–æ. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ä—Ç–∞ –±—É–¥–µ—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ –∑–∞ –≤–∞–º–∏ –Ω–∞ –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏. "
            "–û–¥–∏–Ω –∞–≥–µ–Ω—Ç ‚Äî –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ –¥–µ–ª—É. –†–∞–±–æ—Ç–∞–π—Ç–µ —Ç–æ—á–Ω–æ.", parse_mode="HTML"
        )
        await message.reply("üïµÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–ª–æ –¥–ª—è —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:", reply_markup=kb)
        await state.set_state(FBIReport.choosing_case.state)

    # –í—ã–±–æ—Ä –¥–µ–ª–∞ ‚Äî –ª–æ–≤–∏–º –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —Ç–æ–ª—å–∫–æ –≤ –õ–°
    @dp.callback_query_handler(lambda c: c.data.startswith("fbi_case:"), state="*")
    async def select_case(callback: types.CallbackQuery, state: FSMContext):
        if callback.message.chat.type != "private":
            await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ.", show_alert=True)
            return

        report_key = callback.data.split(":", 1)[1]
        victim_id_str, report_index_str = report_key.split(":")
        victim_id = int(victim_id_str)
        report_index = int(report_index_str)
        await state.update_data(victim_id=victim_id, report_index=report_index)

        victims = load_victims()
        if victim_id not in victims:
            await callback.message.edit_text("‚ö†Ô∏è –ñ–µ—Ä—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        correct_victim = victims[victim_id]
        other_ids = [vid for vid in victims.keys() if vid != victim_id]
        random.shuffle(other_ids)
        option_ids = [victim_id] + other_ids[:3]
        random.shuffle(option_ids)

        kb = InlineKeyboardMarkup(row_width=1)
        for vid in option_ids:
            kb.add(InlineKeyboardButton(text=victims[vid]["name"], callback_data=f"victim_choice:{vid}"))

        await state.update_data(correct_victim_id=victim_id)
        await callback.message.edit_text(
            "üìå <b>–î–æ—Å—å–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–æ.</b>\n\n"
            f"üë§ <b>–û–ø–∏—Å–∞–Ω–∏–µ –∂–µ—Ä—Ç–≤—ã:</b>\n{correct_victim['description']}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ª–∏—á–Ω–æ—Å—Ç—å –∂–µ—Ä—Ç–≤—ã –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é. –í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ.\n"
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –≤ –æ—Ç—á—ë—Ç–µ –∏ —Å–Ω–∏–∂–∞–µ—Ç –¥–æ–≤–µ—Ä–∏–µ –∫ –≤–∞—à–µ–π –≥–∏–ø–æ—Ç–µ–∑–µ.",
            reply_markup=kb,
            parse_mode="HTML"
        )
        await state.set_state(FBIReport.choosing_victim.state)

    # –í—ã–±–æ—Ä –∂–µ—Ä—Ç–≤—ã ‚Äî —Ç–æ–ª—å–∫–æ –≤ –õ–°
    @dp.callback_query_handler(lambda c: c.data.startswith("victim_choice:"), state=FBIReport.choosing_victim)
    async def victim_chosen(callback: types.CallbackQuery, state: FSMContext):
        if callback.message.chat.type != "private":
            await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ.", show_alert=True)
            return

        chosen_id = int(callback.data.split(":")[1])
        data = await state.get_data()
        correct_id = int(data.get("correct_victim_id"))

        await state.update_data(selected_victim_id=chosen_id)

        if chosen_id == correct_id:
            await callback.message.edit_text(
                "‚úÖ –õ–∏—á–Ω–æ—Å—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n"
                "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É –æ—Ä—É–¥–∏—è.",
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                "‚ö†Ô∏è –õ–∏—á–Ω–æ—Å—Ç—å <i>–≤–æ–∑–º–æ–∂–Ω–æ</i> —É–∫–∞–∑–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ.\n"
                "–¢–µ–º –Ω–µ –º–µ–Ω–µ–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º ‚Äî –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç—Ä–∞–∑–∏—Ç—Å—è –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ.",
                parse_mode="HTML"
            )

        await state.set_state(FBIReport.entering_weapon.state)
        await callback.message.answer(
            "üîç <b>–≠—Ç–∞–ø 2: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ä—É–¥–∏—è</b>\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –æ—Ä—É–¥–∏—è (–ø—Ä–∏–º–µ—Ä: <code>AB12</code> –∏–ª–∏ <code>weapon:AB12</code>), "
            "–ª–∏–±–æ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —Å QR ‚Äî —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n"
            "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –ª–∞—Ç–∏–Ω–∏—Ü–∞ A‚ÄìZ, —Ü–∏—Ñ—Ä—ã 0‚Äì9, –¥–µ—Ñ–∏—Å –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è. –û—à–∏–±–∫–∏ –≤ —Ä–∞—Å–∫–ª–∞–¥–∫–µ (–¢‚â†T, –•‚â†X) –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã.",
            parse_mode="HTML"
        )

    # –í–≤–æ–¥ ID –æ—Ä—É–∂–∏—è ‚Äî —Ç–æ–ª—å–∫–æ –≤ –õ–°
    @dp.message_handler(state=FBIReport.entering_weapon)
    async def enter_weapon_id(message: types.Message, state: FSMContext):
        if message.chat.type != "private":
            await message.reply("‚õî –û—Ç–ø—Ä–∞–≤—å ID –æ—Ä—É–∂–∏—è –≤ –ª–∏—á–∫—É –±–æ—Ç—É.")
            return

        raw = (message.text or "").strip()
        low = raw.lower()
        if low.startswith("weapon:"):
            raw = raw.split(":", 1)[-1]
        elif low.startswith("weapon-"):
            raw = raw.split("-", 1)[-1]

        weapon_id = normalize_weapon_id(raw)
        if not weapon_id:
            await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ—Ä—É–∂–∏—è.")
            return

        await message.reply(
            f"üóÇÔ∏è –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω: <code>{weapon_id}</code>\n"
            "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º.", parse_mode="HTML"
        )
        await state.update_data(weapon_id=weapon_id)
        await ask_mask_choice(message, state)

    @dp.message_handler(content_types=types.ContentType.PHOTO, state=FBIReport.entering_weapon)
    async def enter_weapon_by_qr_photo(message: types.Message, state: FSMContext):
        # –¢–æ–ª—å–∫–æ –≤ –õ–°
        if message.chat.type != "private":
            await message.reply("‚õî –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Å QR –≤ –ª–∏—á–∫—É –±–æ—Ç—É.")
            return

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        photo = message.photo[-1]
        os.makedirs("tmp", exist_ok=True)
        tmp_path = Path("tmp") / f"fbi_qr_{message.from_user.id}_{photo.file_unique_id}.jpg"
        await photo.download(destination_file=tmp_path)

        try:
            wid = extract_weapon_from_qr(str(tmp_path))
        finally:
            try:
                tmp_path.unlink(missing_ok=True)
            except Exception:
                pass

        if not wid:
            await message.reply(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å QR. –ü—Ä–∏—à–ª–∏—Ç–µ –±–æ–ª–µ–µ —á—ë—Ç–∫–æ–µ —Ñ–æ—Ç–æ\n"
                "–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤—Ä—É—á–Ω—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: <code>weapon:AB12</code> –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ <code>AB12</code>).",
                parse_mode="HTML"
            )
            return

        # –ü—Ä–∏–Ω—è–ª–∏ ID ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π, –∫–∞–∫ –∏ –ø—Ä–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–≤–æ–¥–µ
        await state.update_data(weapon_id=wid)
        await message.reply(f"üîê ID –æ—Ä—É–∂–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω: <code>{wid}</code>", parse_mode="HTML")
        await ask_mask_choice(message, state)
    # –í—ã–±–æ—Ä –º–∞—Å–∫–∏ ‚Äî —Å —Ñ–æ–ª–±—ç–∫–æ–º, –µ—Å–ª–∏ identity_id –Ω–µ—Ç
    async def ask_mask_choice(message: types.Message, state: FSMContext):
        data = await state.get_data()
        victim_id = data.get("victim_id")

        reports = load_all_reports()
        record = reports.get(str(victim_id))
        if not record or not record.get("reports"):
            await message.reply("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ –¥–µ–ª—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await state.finish()
            return

        report_index = data.get("report_index")
        selected_report = record["reports"][report_index]
        identity_id = selected_report.get("identity_id")

        cultists = load_cultists()
        identity = next((c for c in cultists if str(c.get("id")) == str(identity_id)), None)

        kb = InlineKeyboardMarkup(row_width=1)
        if identity:
            correct_symbol = identity.get("mask_symbol")
            pool = [c["mask_symbol"] for c in cultists if c.get("mask_symbol")]
            other = [s for s in pool if s != correct_symbol]
            random.shuffle(other)
            options = [correct_symbol, *other[:4]]
            await state.update_data(correct_mask_symbol=correct_symbol)
            prompt = (
                "üé≠ <b>–≠—Ç–∞–ø 3: —Å–∏–º–≤–æ–ª –º–∞—Å–∫–∏</b>\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–≤–æ–ª, –∫–æ—Ç–æ—Ä—ã–π —Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–ª —É –ø—Ä–∏—á–∞—Å—Ç–Ω–æ–≥–æ –∫—É–ª—å—Ç–∏—Å—Ç–∞. "
                "–°–∏–º–≤–æ–ª –º–æ–∂–µ—Ç –≤—Å—Ç—Ä–µ—á–∞—Ç—å—Å—è –≤ –¥–æ–ø—Ä–æ—Å–∞—Ö.\n"
                "–í—ã–±–æ—Ä —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –∏ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω."
            )
        else:
            pool = list({c["mask_symbol"] for c in cultists if c.get("mask_symbol")})
            random.shuffle(pool)
            options = pool[:5]
            await state.update_data(correct_mask_symbol=None)
            prompt = (
                         "üé≠ <b>–≠—Ç–∞–ø 3: —Å–∏–º–≤–æ–ª –º–∞—Å–∫–∏</b>\n"
                         "–í –æ—Ç—á—ë—Ç–µ —Å–∏–º–≤–æ–ª –Ω–µ —É–∫–∞–∑–∞–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ —Å–æ–ø—É—Ç—Å—Ç–≤—É—é—â–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º.\n"
                         "–†–µ—à–µ–Ω–∏–µ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç—Å—è –∏ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ."
                     )

        random.shuffle(options)
        for symbol in options:
            kb.add(InlineKeyboardButton(text=symbol, callback_data=f"mask_choice:{symbol}"))

        await message.reply(prompt, reply_markup=kb)
        await state.set_state(FBIReport.choosing_mask.state)

    @dp.callback_query_handler(lambda c: c.data.startswith("mask_choice:"), state=FBIReport.choosing_mask)
    async def mask_chosen(callback: types.CallbackQuery, state: FSMContext):
        if callback.message.chat.type != "private":
            await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ.", show_alert=True)
            return

        chosen_symbol = callback.data.split(":", 1)[1]
        await state.update_data(chosen_mask_symbol=chosen_symbol)  # ‚Üê –¥–æ–±–∞–≤–∏–ª–∏

        data = await state.get_data()
        correct_symbol = data.get("correct_mask_symbol")

        if correct_symbol is None:
            await callback.message.edit_text(f"‚úÖ –ú–∞—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–∞: {chosen_symbol}")
        else:
            await callback.message.edit_text(
                "‚úÖ –ú–∞—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ." if chosen_symbol == correct_symbol
                else "‚ö†Ô∏è –°–∏–º–≤–æ–ª –º–∞—Å–∫–∏, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–≤–µ—Ä–µ–Ω."
            )

        rituals = load_rituals()
        if not rituals:
            await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∏—Ç—É–∞–ª–æ–≤.")
            await state.finish()
            return

        kb = InlineKeyboardMarkup(row_width=2)
        kb.add(*[InlineKeyboardButton(text=rit, callback_data=f"ritual_choice:{rit}") for rit in rituals])

        await callback.message.answer(
            "üîÆ <b>–≠—Ç–∞–ø 4: —Ç–∏–ø —Ä–∏—Ç—É–∞–ª–∞</b>\n"
            "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ç–∏–ø –ø–æ –Ω–∞–±–ª—é–¥–∞–µ–º—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º (–∞—Ç—Ä–∏–±—É—Ç—ã, –º–µ—Å—Ç–æ, –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–µ–π—Å—Ç–≤–∏–π, —Ö–∞—Ä–∞–∫—Ç–µ—Ä –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π). "
            "–í—ã–±–æ—Ä –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –¥–ª—è –≤–∞—à–µ–π –ø–æ–ø—ã—Ç–∫–∏.",
            reply_markup=kb, parse_mode="HTML"
        )
        await state.set_state(FBIReport.choosing_ritual.state)

    @dp.callback_query_handler(lambda c: c.data.startswith("ritual_choice:"), state=FBIReport.choosing_ritual)
    async def ritual_chosen(callback: types.CallbackQuery, state: FSMContext):
        if callback.message.chat.type != "private":
            await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ.", show_alert=True)
            return

        ritual = callback.data.split(":", 1)[1]
        await state.update_data(ritual_guess=ritual)

        data = await state.get_data()
        case_code = generate_case_code(data["victim_id"])

        summary = (
            "üìù <b>–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –ª–∏—Å—Ç</b>\n\n"
            f"üìÅ –î–µ–ª–æ: {case_code}\n"
            f"üî™ –û—Ä—É–∂–∏–µ: <code>{data['weapon_id']}</code>\n"
            f"üé≠ –ú–∞—Å–∫–∞: {data.get('chosen_mask_symbol')}\n"
            f"üîÆ –†–∏—Ç—É–∞–ª: {ritual}\n\n"
            "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –æ–¥–∏–Ω –∞–≥–µ–Ω—Ç ‚Äî –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ –¥–µ–ª—É. "
            "–î–µ–ª–æ –∑–∞–∫—Ä–æ–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–µ—Ä–Ω–æ–º –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤—Å–µ —á–µ—Ç—ã—Ä–µ –ø—É–Ω–∫—Ç–∞."
        )

        kb = InlineKeyboardMarkup().add(
            InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data="fbi_submit_report")
        )
        await callback.message.edit_text(summary, reply_markup=kb, parse_mode="HTML")
        await state.set_state(FBIReport.confirming.state)

    @dp.callback_query_handler(lambda c: c.data == "fbi_submit_report", state=FBIReport.confirming)
    async def fbi_submit_report(callback: types.CallbackQuery, state: FSMContext):
        if callback.message.chat.type != "private":
            await callback.answer("‚õî –¢–æ–ª—å–∫–æ –≤ –ª–∏—á–∫–µ.", show_alert=True)
            return

        agent_id = callback.from_user.id
        data = await state.get_data()
        victim_id = int(data.get("victim_id"))
        report_index = int(data.get("report_index"))

        # 1) –ù–∞–π–¥—ë–º –¥–µ–ª–æ
        cases = load_cases()
        case = next((c for c in cases
                     if int(c.get("victim_id", -1)) == victim_id
                     and int(c.get("report_index", -1)) == report_index), None)
        if not case:
            await callback.message.edit_text("‚ö†Ô∏è –î–µ–ª–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–æ.")
            await state.finish()
            return

        if case.get("status") == "closed":
            closer = case.get("solved_by")
            when = case.get("solved_at", "")[:16].replace("T", " ")
            who = f"–∞–≥–µ–Ω—Ç tg://user?id={closer}" if closer else "–¥—Ä—É–≥–æ–π –∞–≥–µ–Ω—Ç"
            await callback.message.edit_text(
                f"üü° –≠—Ç–æ –¥–µ–ª–æ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–æ ({when}), {who}.",
                parse_mode="HTML"
            )
            await state.finish()
            return

        # 2) –û–¥–∏–Ω –∞–≥–µ–Ω—Ç ‚Äî –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞
        attempts = case.get("attempts", [])
        if any(int(a.get("agent_id", 0)) == agent_id for a in attempts):
            await callback.message.edit_text("‚õî –£ –≤–∞—Å —É–∂–µ –±—ã–ª–∞ –ø–æ–ø—ã—Ç–∫–∞ –ø–æ —ç—Ç–æ–º—É –¥–µ–ª—É.")
            await state.finish()
            return

        # 3) –ò—Å—Ç–∏–Ω–∞ –∏–∑ –ø—Ä–∏–Ω—è—Ç—ã—Ö –æ—Ç—á—ë—Ç–æ–≤
        all_reports = load_all_reports()
        block = all_reports.get(str(victim_id))
        if not block:
            await callback.message.edit_text("‚ö†Ô∏è –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–µ–ª—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await state.finish()
            return
        reports = block.get("reports", [])
        if report_index >= len(reports):
            await callback.message.edit_text("‚ö†Ô∏è –†–µ–ø–æ—Ä—Ç –ø–æ –¥–µ–ª—É –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.finish()
            return
        rep = reports[report_index]
        true_weapon = (rep.get("weapon_id") or "").strip().upper()

        # –º–∞—Å–∫–∞ –∏–∑ identity
        identity_id = rep.get("identity_id")
        cultists = load_cultists()
        identity = next((c for c in cultists if str(c.get("id")) == str(identity_id)), None)
        true_mask = identity.get("mask_symbol") if identity else None

        true_ritual = block.get("ritual")
        true_victim_id = victim_id  # –ø–æ case

        # 4) –û—Ç–≤–µ—Ç—ã –∞–≥–µ–Ω—Ç–∞
        selected_victim_id = int(data.get("selected_victim_id", -1))
        agent_weapon = (data.get("weapon_id") or "").strip().upper()
        agent_mask = data.get("chosen_mask_symbol")
        agent_ritual = data.get("ritual_guess")

        # 5) –ü—Ä–æ–≤–µ—Ä–∫–∞ (–≤—Å–µ 4 –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å True)
        victim_correct = (selected_victim_id == true_victim_id)
        weapon_correct = (agent_weapon == true_weapon)
        mask_checked = true_mask is not None
        mask_correct = (agent_mask == true_mask) if mask_checked else False
        ritual_correct = (agent_ritual == true_ritual)

        all_ok = victim_correct and weapon_correct and mask_correct and ritual_correct

        # 6) –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É
        attempt = {
            "agent_id": agent_id,
            "timestamp": (datetime.utcnow() + TZ_OFFSET).isoformat(),
            "answers": {
                "victim_id": selected_victim_id,
                "weapon_id": agent_weapon,
                "mask_symbol": agent_mask,
                "ritual_guess": agent_ritual
            },
            "result": {
                "victim_correct": victim_correct,
                "weapon_correct": weapon_correct,
                "mask_correct": mask_correct if mask_checked else None,
                "ritual_correct": ritual_correct
            },
            "closed_case": all_ok
        }
        attempts.append(attempt)
        case["attempts"] = attempts

        # 7) –ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –∑–∞–∫—Ä—ã–≤–∞–µ–º, –Ω–∞—á–∏—Å–ª—è–µ–º –æ—á–∫–∏ –∏ –ø—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª –§–ë–†
        if all_ok:
            case["status"] = "closed"
            case["solved_by"] = agent_id
            case["solved_at"] = (datetime.utcnow() + TZ_OFFSET).isoformat()

            # –û—á–∫–∏
            scores = load_scores()
            scores[str(agent_id)] = scores.get(str(agent_id), 0) + 1
            save_scores(scores)

            # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É
            await callback.message.edit_text(
                "üü¢ <b>–î–µ–ª–æ –∑–∞–∫—Ä—ã—Ç–æ.</b>\n"
                "–í—Å–µ —á–µ—Ç—ã—Ä–µ –ø—É–Ω–∫—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã: –∂–µ—Ä—Ç–≤–∞, –æ—Ä—É–¥–∏–µ, –º–∞—Å–∫–∞, —Ä–∏—Ç—É–∞–ª.\n"
                "–ù–∞—á–∏—Å–ª–µ–Ω–æ: +1 –æ—á–∫–æ. –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∞—Ä—Ö–∏–≤–µ –¥–µ–ª.",
                parse_mode="HTML"
            )

            # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª –§–ë–† (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω ID)
            if FBI_CHANNEL_ID:
                try:
                    case_id = case.get("case_id") or f"{victim_id}-R{report_index+1}"
                    closer_mention = f"<a href='tg://user?id={agent_id}'>–∞–≥–µ–Ω—Ç</a>"
                    verdict = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã: –ª–∏—á–Ω–æ—Å—Ç—å –∂–µ—Ä—Ç–≤—ã, –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ—Ä—É–¥–∏—è, —Å–∏–º–≤–æ–ª –º–∞—Å–∫–∏, —Ç–∏–ø —Ä–∏—Ç—É–∞–ª–∞."
                    await callback.message.bot.send_message(
                        FBI_CHANNEL_ID,
                        f"üóÇ <b>–î–µ–ª–æ #{case_id}</b> –∑–∞–∫—Ä—ã—Ç–æ {closer_mention}.\n{verdict}",
                        parse_mode="HTML"
                    )
                except Exception as e:
                    print(f"[FBI] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∑–∞–∫—Ä—ã—Ç–∏–µ –¥–µ–ª–∞: {e}")
        else:
            # –°–æ–æ–±—â–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç—É —Å —Ä–∞–∑–±–æ—Ä–æ–º
            lines = [
                "üî¥ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞.</b>",
                "–î–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ –≤—Å–µ–º –ø—É–Ω–∫—Ç–∞–º:",
                f"‚Ä¢ –ñ–µ—Ä—Ç–≤–∞: {'‚úÖ' if victim_correct else '‚ùå'}",
                f"‚Ä¢ –û—Ä—É–∂–∏–µ: {'‚úÖ' if weapon_correct else '‚ùå'}",
                f"‚Ä¢ –ú–∞—Å–∫–∞: {'‚úÖ' if mask_correct else '‚ùå'}",
                f"‚Ä¢ –†–∏—Ç—É–∞–ª: {'‚úÖ' if ritual_correct else '‚ùå'}",
                "",
                "–ü–æ–ø—ã—Ç–∫–∞ –∞–≥–µ–Ω—Ç–∞ –∏—Å—á–µ—Ä–ø–∞–Ω–∞. –î–µ–ª–æ –æ—Å—Ç–∞—ë—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—ã–º.",
                "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: –ø–µ—Ä–µ–æ—Ü–µ–Ω–∏—Ç–µ —É–ª–∏–∫–∏, –ø–µ—Ä–µ—á–∏—Ç–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏—è –∂–µ—Ä—Ç–≤—ã –∏ –º–µ—Ç–æ–¥–∏–∫—É —Ä–∏—Ç—É–∞–ª–∞, "
                "–ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏—é –æ—Ä—É–∂–∏—è (A‚Üî–ê, X‚Üî–• –∏ —Ç. –ø.)."
            ]
            await callback.message.edit_text("\n".join(lines), parse_mode="HTML")

        # 8) –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ–ª–∞ –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å FSM
        save_cases(cases)
        await state.finish()
    @dp.message_handler(lambda m: m.text and m.text.lower().startswith("/start fbi_"), state="*")
    async def fbi_start_router(message: types.Message, state: FSMContext):
        if message.chat.type != "private":
            await message.reply("‚õî –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ª–∏—á–∫–µ –±–æ—Ç—É.")
            return
        args = (message.get_args() or "").lower()
        if args == "fbi_cases":
            # –≤—ã–∑–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π show_open_cases (–æ–±—ä—è–≤–ª–µ–Ω –í–ù–£–¢–†–ò register_fbi_handlers)
            return await show_open_cases(message, state)
        if args == "fbi_investigate":
            # –≤—ã–∑–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π start_fbi_report (—Ç–æ–∂–µ –æ–±—ä—è–≤–ª–µ–Ω –í–ù–£–¢–†–ò)
            return await start_fbi_report(message, state)
        # –µ—Å–ª–∏ —ç—Ç–æ /start —Å –¥—Ä—É–≥–∏–º–∏ –∞—Ä–≥–∞–º–∏ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –¥–∞—Å—Ç –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–≤–æ–µ–º—É –æ–±—â–µ–º—É /start

async def create_fbi_cases_for_victim(victim_id: int, bot, fbi_channel_id: int) -> int:
    """
    –ù–∞ –∫–∞–∂–¥—ã–π –ø—Ä–∏–Ω—è—Ç—ã–π –æ—Ç—á—ë—Ç –ø–æ –∂–µ—Ä—Ç–≤–µ —Å–æ–∑–¥–∞—ë—Ç –æ—Ç–¥–µ–ª—å–Ω–æ–µ –¥–µ–ª–æ –§–ë–†:
    - –¥–µ–ª–∞–µ—Ç –∏—Å–∫–∞–∂—ë–Ω–Ω—É—é –∫–æ–ø–∏—é —Ñ–æ—Ç–æ –æ—Ç—á—ë—Ç–∞
    - –ø–æ—Å—Ç–∏—Ç –¥–µ–ª–æ –≤ –∫–∞–Ω–∞–ª –§–ë–† (—Ñ–æ—Ç–æ + –æ–ø–∏—Å–∞–Ω–∏–µ)
    - —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Ä—Ç–æ—á–∫—É –¥–µ–ª–∞ –≤ data/fbi_cases.json
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–µ–ª.
    """
    all_reports = load_all_reports()
    block = all_reports.get(str(victim_id))
    if not block:
        return 0

    accepted = block.get("reports", [])
    if not accepted:
        return 0

    cases = load_cases()
    existing = {c.get("case_id") for c in cases}

    created = 0
    out_dir = Path("fbi_cases")
    out_dir.mkdir(parents=True, exist_ok=True)

    # –ü—Ä–æ–±–µ–∂–∏–º—Å—è –ø–æ –≤—Å–µ–º –ø—Ä–∏–Ω—è—Ç—ã–º –æ—Ç—á—ë—Ç–∞–º –ø–æ —ç—Ç–æ–π –∂–µ—Ä—Ç–≤–µ: R1, R2, R3...
    for idx, rep in enumerate(accepted, start=1):
        case_id = f"{victim_id}-R{idx}"
        if case_id in existing:
            continue

        user_id = rep.get("user_id")
        # —Ñ–æ—Ç–æ –æ—Ç—á—ë—Ç–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —É —Ç–µ–±—è –∫–∞–∫ reports/ritual_{victim_id}_{user_id}.jpg
        src = Path("reports") / f"ritual_{victim_id}_{user_id}.jpg"
        if not src.exists():
            # –±—ã–≤–∞—é—Ç —Å–ª—É—á–∞–∏, –∫–æ–≥–¥–∞ —Ñ–æ—Ç–æ –ø—É–±–ª–∏–∫–æ–≤–∞–ª–æ—Å—å –ø–æ file_id ‚Äî —Ç–æ–≥–¥–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞ –Ω–∞ –¥–∏—Å–∫–µ –Ω–µ—Ç
            # –≤ —Ç–∞–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ –º–æ–∂–Ω–æ —Å–∫–∏–ø–Ω—É—Ç—å –∏–ª–∏ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è re-get —á–µ—Ä–µ–∑ API ‚Äî –æ—Å—Ç–∞–≤–∏–º —Å–∫–∏–ø
            continue

        try:
            produced_path = ultra_obscured_version(str(src))  # —Ñ—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—ë—Ç –ø—É—Ç—å –∫ _distorted.jpg
            if not produced_path or not os.path.exists(produced_path):
                print(f"[FBI] –û–±—Ñ—É—Å–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è {case_id}: —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω")
                continue

            # —Ö–æ—Ç–∏–º —Ö—Ä–∞–Ω–∏—Ç—å –≤—Å—ë –≤ –ø–∞–ø–∫–µ fbi_cases —Å –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º –∏–º–µ–Ω–µ–º
            obscured = out_dir / f"case_{case_id}_obscured.jpg"
            # –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ ‚Äî –ø–µ—Ä–µ–Ω–µ—Å—ë–º/–ø–µ—Ä–µ–∏–º–µ–Ω—É–µ–º
            if os.path.abspath(produced_path) != os.path.abspath(obscured):
                try:
                    os.replace(produced_path, obscured)  # –∞—Ç–æ–º–∞—Ä–Ω–æ–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
                except Exception:
                    # fallback: –∫–æ–ø–∏—è+—É–¥–∞–ª–µ–Ω–∏–µ
                    import shutil
                    shutil.copyfile(produced_path, obscured)
                    try:
                        os.remove(produced_path)
                    except Exception:
                        pass
        except Exception as e:
            print(f"[FBI] –û–±—Ñ—É—Å–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è {case_id}: {e}")
            continue

        caption = (
            f"üóÇ <b>–ù–æ–≤–æ–µ –¥–µ–ª–æ</b> ‚Äî <b>#{case_id}</b>\n"
            f"–ñ–µ—Ä—Ç–≤–∞: {block.get('victim_name')}\n"
            f"–†–∏—Ç—É–∞–ª: {block.get('ritual')}\n"
            f"–ú–µ—Å—Ç–æ: {block.get('place')}\n"
            f"‚ÑπÔ∏è –ù–∞ —Ñ–æ—Ç–æ ‚Äî –∏—Å–∫–∞–∂—ë–Ω–Ω—ã–π –∫–∞–¥—Ä. –ù–∞–π–¥–∏—Ç–µ —Å–≤—è–∑—å."
        )

        try:
            with open(obscured, "rb") as ph:
                posted = await bot.send_photo(fbi_channel_id, photo=ph, caption=caption, parse_mode="HTML")
            obscured_file_id = posted.photo[-1].file_id if posted.photo else None
        except Exception as e:
            print(f"[FBI] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –¥–µ–ª–æ {case_id} –≤ –∫–∞–Ω–∞–ª –§–ë–†: {e}")
            continue

        cases.append({
            "case_id": case_id,
            "victim_id": victim_id,
            "victim_name": block.get("victim_name"),
            "ritual": block.get("ritual"),
            "place": block.get("place"),
            "created_at": (datetime.utcnow() + TZ_OFFSET).isoformat(),
            "obscured_file_id": obscured_file_id,
            "report_user_id": user_id,
            "report_index": idx - 1,   # –∏–Ω–¥–µ–∫—Å —Ä–µ–ø–æ—Ä—Ç–∞ –≤ –º–∞—Å—Å–∏–≤–µ reports
            "status": "open"           # –Ω–∞ –±—É–¥—É—â–µ–µ (–º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å)
        })
        existing.add(case_id)
        created += 1

    if created:
        save_cases(cases)

    return created