import json
import hashlib
import random
from pathlib import Path
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import Dispatcher
from shared import load_players, load_all_reports, load_victims, load_cultists, load_rituals
from hashlib import sha256
from datetime import datetime

REPORT_FILE = Path("ritual_reports.json")
VICTIMS_FILE = Path("victims.json")

class FBIReport(StatesGroup):
    choosing_case = State()
    choosing_victim = State()
    entering_weapon = State()
    choosing_mask = State()
    choosing_ritual = State()
    confirming = State()


def normalize_weapon_id(text):
    mapping = {
        "–ê": "A", "–í": "B", "–°": "C", "–ï": "E", "–ù": "H", "–ö": "K",
        "–ú": "M", "–û": "O", "–†": "P", "–¢": "T", "–•": "X", "–£": "Y"
    }
    text = text.strip().upper()
    return "".join(mapping.get(ch, ch) for ch in text)

def generate_case_code(victim_id: int) -> str:
    hash_bytes = hashlib.sha256(str(victim_id).encode()).digest()
    alphabet = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789"
    letters = ''.join(alphabet[b % len(alphabet)] for b in hash_bytes[:4])
    return f"RIT-{letters}"

def get_open_cases():
    all_reports = load_all_reports()
    open_cases = []

    for victim_id_str, data in all_reports.items():
        victim_id = int(victim_id_str)
        victim_name = data.get("victim_name")
        place = data.get("place")
        ritual = data.get("ritual")
        reports = data.get("reports", [])

        for idx, report in enumerate(reports):
            report_key = f"{victim_id}:{idx}"  # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á

            # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å fbi_report –ø–æ —ç—Ç–æ–º—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ä–µ–ø–æ—Ä—Ç—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            if report.get("fbi_report"):
                continue

            timestamp = report.get("timestamp")
            dt = datetime.fromisoformat(timestamp)
            short_time = dt.strftime("%H:%M")
            short_place = place.strip().split()[-1]

            open_cases.append({
                "report_key": report_key,
                "victim_id": victim_id,
                "report_index": idx,
                "case_code": generate_case_code(victim_id),
                "victim_name": victim_name,
                "place": short_place,
                "ritual": ritual,
                "time": short_time
            })

    return open_cases
def register_fbi_handlers(dp: Dispatcher):
    @dp.message_handler(commands=["—Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å"], state="*")
    async def start_fbi_report(message: types.Message, state: FSMContext):
        user_id = message.from_user.id
        players = load_players()

        if players.get(str(user_id), {}).get("team") != "fbi":
            await message.reply("‚õî –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–≥–µ–Ω—Ç–∞–º –§–ë–†.")
            return

        cases = get_open_cases()
        if not cases:
            await message.reply("‚úÖ –ù–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö –¥–µ–ª –¥–ª—è —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.")
            return

        keyboard = InlineKeyboardMarkup()

        for case in cases:
            short_place = case["place"].strip().split()[-1]
            time_str = case["time"]

            label = f"{case['case_code']} ¬∑ R{case['report_index']} ¬∑ {short_place} ¬∑ {time_str}"
            keyboard.add(
                InlineKeyboardButton(
                    text=label,
                    callback_data=f"fbi_case:{case['report_key']}"
                )
            )

        await message.reply("üïµÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–ª–æ –¥–ª—è —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:", reply_markup=keyboard)
        await state.set_state(FBIReport.choosing_case.state)
# –í—ã–±–æ—Ä –∂–µ—Ä—Ç–≤—ã –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –∏–∑ 4 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    @dp.callback_query_handler(lambda c: c.data.startswith("fbi_case:"), state=FBIReport.choosing_case)
    async def select_case(callback: types.CallbackQuery, state: FSMContext):
        report_key = callback.data.split(":", 1)[1]
        victim_id_str, report_index_str = report_key.split(":")
        victim_id = int(victim_id_str)
        report_index = int(report_index_str)

        await state.update_data(victim_id=victim_id, report_index=report_index)


        victims = load_victims()
        if victim_id not in victims:
            await callback.message.edit_text("‚ö†Ô∏è –ñ–µ—Ä—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        correct_victim = victims[victim_id]
        other_victims = [v for vid, v in victims.items() if vid != victim_id]
        random.shuffle(other_victims)
        options = [correct_victim] + other_victims[:3]
        random.shuffle(options)

        keyboard = InlineKeyboardMarkup()
        for v in options:
            keyboard.add(InlineKeyboardButton(
                text=v["name"],
                callback_data=f"victim_choice:{v['id']}"
            ))

        await state.update_data(correct_victim_id=victim_id)
        await callback.message.edit_text(
                f"‚úÖ –î–µ–ª–æ –≤—ã–±—Ä–∞–Ω–æ.\n\nüë§ <b>–û–ø–∏—Å–∞–Ω–∏–µ –∂–µ—Ä—Ç–≤—ã:</b>\n{correct_victim['description']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–º—è –∂–µ—Ä—Ç–≤—ã:",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.set_state(FBIReport.choosing_victim.state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∂–µ—Ä—Ç–≤—ã
    @dp.callback_query_handler(lambda c: c.data.startswith("victim_choice:"), state=FBIReport.choosing_victim)
    async def victim_chosen(callback: types.CallbackQuery, state: FSMContext):
        chosen_id = callback.data.split(":")[1]
        data = await state.get_data()
        correct_id_str = data.get("correct_victim_id")
        if correct_id_str is None:
            await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –≤–µ—Ä–Ω–æ–π –∂–µ—Ä—Ç–≤—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.finish()
            return

        correct_id = int(correct_id_str)

        await state.update_data(selected_victim_id=chosen_id)

        chosen_id = int(chosen_id)
        if chosen_id == correct_id:
            await callback.message.edit_text("‚úÖ –ò–º—è –∂–µ—Ä—Ç–≤—ã –≤—ã–±—Ä–∞–Ω–æ –≤–µ—Ä–Ω–æ.")
        else:
            await callback.message.edit_text("‚ö†Ô∏è –ò–º—è –≤—ã–±—Ä–∞–Ω–æ, –Ω–æ –æ–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–º.")

        await state.set_state(FBIReport.entering_weapon.state)
        await callback.message.answer("üîç –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è (QR/–∫–æ–¥).")

    @dp.message_handler(state=FBIReport.entering_weapon)
    async def enter_weapon_id(message: types.Message, state: FSMContext):
        raw_input = message.text.strip()
        weapon_id = normalize_weapon_id(raw_input)

        if not weapon_id:
            await message.reply("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –æ—Ä—É–∂–∏—è.")
            return

        await state.update_data(weapon_id=weapon_id)

        # –í—ã–∑–æ–≤–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ —Å—Ä–∞–∑—É: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫
        await ask_mask_choice(message, state)
        
   

    async def ask_mask_choice(message: types.Message, state: FSMContext):
        data = await state.get_data()
        victim_id = data.get("victim_id")

        cultists = load_cultists()
        reports = load_all_reports()
        report = reports.get(str(victim_id))
        if not report or not report.get("reports"):
            await message.reply("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ –¥–µ–ª—É –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await state.finish()
            return

        report_index = data.get("report_index")
        selected_report = report["reports"][report_index] # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–ø–æ—Ä—Ç
        identity_id = selected_report.get("identity_id")
        print(f"[DEBUG] identity_id –∏–∑ report: {identity_id}")
        print(f"[DEBUG] –í—Å–µ id –∏–∑ cultists: {[c['id'] for c in cultists]}")
        identity = next((c for c in cultists if c["id"] == str(identity_id)), None)
        if not identity:
            await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É–ª—å—Ç–ª–∏—Å—Ç–∞.")
            await state.finish()
            return

        correct_symbol = identity.get("mask_symbol")
        print(f"[DEBUG] victim_id={victim_id} identity_id={identity_id} correct_symbol={correct_symbol}")
        other_symbols = [c["mask_symbol"] for c in cultists if c["mask_symbol"] != correct_symbol]
        random.shuffle(other_symbols)
        options = list({correct_symbol, *other_symbols[:4]})
        random.shuffle(options)

        keyboard = InlineKeyboardMarkup()
        for symbol in options:
            keyboard.add(InlineKeyboardButton(
                text=symbol,
                callback_data=f"mask_choice:{symbol}"
            ))

        await state.update_data(correct_mask_symbol=correct_symbol)
        await message.reply(
            "üé≠ –í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–≤–æ–ª –º–∞—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –Ω–∞ –∫—É–ª—å—Ç–ª–∏—Å—Ç–µ:",
            reply_markup=keyboard
        )
        await state.set_state(FBIReport.choosing_mask.state)

    @dp.callback_query_handler(lambda c: c.data.startswith("mask_choice:"), state=FBIReport.choosing_mask)
    async def mask_chosen(callback: types.CallbackQuery, state: FSMContext):
        chosen_symbol = callback.data.split(":", 1)[1]
        data = await state.get_data()
        correct_symbol = data.get("correct_mask_symbol")

        if chosen_symbol == correct_symbol:
            await callback.message.edit_text("‚úÖ –ú–∞—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–∞ –≤–µ—Ä–Ω–æ.")
        else:
            await callback.message.edit_text("‚ö†Ô∏è –°–∏–º–≤–æ–ª –º–∞—Å–∫–∏, –≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–≤–µ—Ä–µ–Ω.")

        await state.set_state(FBIReport.choosing_ritual.state)
        await callback.message.answer("üîÆ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Ç–∏–ø —Ä–∏—Ç—É–∞–ª–∞.")
        rituals = load_rituals()
        if not rituals:
            await callback.message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–∏—Ç—É–∞–ª–æ–≤.")
            await state.finish()
            return

        keyboard = InlineKeyboardMarkup(row_width=2)
        buttons = [InlineKeyboardButton(text=rit, callback_data=f"ritual_choice:{rit}") for rit in rituals]
        keyboard.add(*buttons)

        await callback.message.answer("üîÆ –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π —Ç–∏–ø —Ä–∏—Ç—É–∞–ª–∞:", reply_markup=keyboard)
        await state.set_state(FBIReport.choosing_ritual.state) 

    @dp.callback_query_handler(lambda c: c.data.startswith("ritual_choice:"), state=FBIReport.choosing_ritual)
    async def ritual_chosen(callback: types.CallbackQuery, state: FSMContext):
        ritual = callback.data.split(":", 1)[1]
        await state.update_data(ritual_guess=ritual)

        data = await state.get_data()
        case_code = generate_case_code(data["victim_id"])

        summary = (
            f"üìù –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:\n\n"
            f"üìÅ –î–µ–ª–æ: {case_code}\n"
            f"üî™ –û—Ä—É–∂–∏–µ: <code>{data['weapon_id']}</code>\n"
            f"üé≠ –ú–∞—Å–∫–∞: {data['correct_mask_symbol']}\n"
            f"üîÆ –†–∏—Ç—É–∞–ª: {ritual}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ—Ç—á—ë—Ç–∞."
        )

        keyboard = InlineKeyboardMarkup()
        keyboard.add(InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç", callback_data="fbi_submit_report"))

        await callback.message.edit_text(summary, reply_markup=keyboard, parse_mode="HTML")
        await state.set_state(FBIReport.confirming.state)